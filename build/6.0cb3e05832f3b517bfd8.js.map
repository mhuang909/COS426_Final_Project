{"version":3,"file":"6.0cb3e05832f3b517bfd8.js","mappings":"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","sources":["webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/utils/buildInstructions.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/utils/clearList.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite/SpritePipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/batcher/shared/BatcherPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/Filter.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/mask/mask.frag.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/mask/mask.wgsl.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/mask/MaskFilter.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/mask/mask.vert.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/mask/alpha/AlphaMaskPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/mask/color/ColorMaskPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/mask/stencil/StencilMaskPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/SchedulerSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/utils/sayHello.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/utils/data/clean.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs"],"sourcesContent":["\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","\"use strict\";\nconst textureBit = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    )\n  }\n};\nconst textureBitGl = {\n  name: \"texture-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureMatrix;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n        uniform sampler2D uTexture;\n\n         \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = texture(uTexture, vUV);\n        `\n    )\n  }\n};\n\nexport { textureBit, textureBitGl };\n//# sourceMappingURL=textureBit.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"not-equal\",\n    passOp: \"replace\"\n  },\n  stencilBack: {\n    compare: \"not-equal\",\n    passOp: \"replace\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   * @ignore\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuRenderTargetHash\");\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    this.adaptor.prerender?.(this.rootRenderTarget);\n  }\n  postrender() {\n    this.adaptor.postrender?.(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    let dataInt32 = null;\n    if (!data) {\n      data = uniformGroup.buffer.data;\n      dataInt32 = uniformGroup.buffer.dataInt32;\n    }\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"dataInt32\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        dataInt32[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"vec2<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n  \"vec3<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n  \"vec4<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  updateRenderable() {\n  }\n  destroyRenderable() {\n  }\n  validateRenderable() {\n    return false;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    if (renderGroup.isCachedAsTexture) {\n      this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n    } else {\n      this._addRenderableDirect(renderGroup, instructionSet);\n    }\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    if (renderGroup.isCachedAsTexture) {\n      this._executeCacheAsTexture(renderGroup);\n    } else {\n      this._executeDirect(renderGroup);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _addRenderableDirect(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    if (renderGroup._batchableRenderGroup) {\n      BigPool.return(renderGroup._batchableRenderGroup);\n      renderGroup._batchableRenderGroup = null;\n    }\n    instructionSet.add(renderGroup);\n  }\n  _addRenderableCacheAsTexture(renderGroup, instructionSet) {\n    const batchableRenderGroup = renderGroup._batchableRenderGroup ?? (renderGroup._batchableRenderGroup = BigPool.get(BatchableSprite));\n    batchableRenderGroup.renderable = renderGroup.root;\n    batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n    batchableRenderGroup.texture = renderGroup.texture;\n    batchableRenderGroup.bounds = renderGroup._textureBounds;\n    instructionSet.add(renderGroup);\n    this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n  }\n  _executeCacheAsTexture(renderGroup) {\n    if (renderGroup.textureNeedsUpdate) {\n      renderGroup.textureNeedsUpdate = false;\n      const worldTransformMatrix = tempMatrix.identity().translate(\n        -renderGroup._textureBounds.x,\n        -renderGroup._textureBounds.y\n      );\n      this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n      this._renderer.globalUniforms.push({\n        worldTransformMatrix,\n        worldColor: 4294967295\n      });\n      executeInstructions(renderGroup, this._renderer.renderPipes);\n      this._renderer.renderTarget.finishRenderPass();\n      this._renderer.renderTarget.pop();\n      this._renderer.globalUniforms.pop();\n    }\n    renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n    renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n  }\n  _executeDirect(renderGroup) {\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction buildInstructions(renderGroup, rendererOrPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  const renderPipes = renderer.renderPipes;\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderer, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererOrPipes) {\n  const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild)\n    return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, renderer);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, renderer, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderer) {\n  if (container.renderPipeId) {\n    const renderable = container;\n    const { renderPipes, renderableGC } = renderer;\n    renderPipes.blendMode.setBlendMode(renderable, container.groupBlendMode, instructionSet);\n    const rp = renderPipes;\n    rp[renderable.renderPipeId].addRenderable(renderable, instructionSet);\n    renderableGC.addRenderable(renderable, instructionSet);\n    renderable.didViewUpdate = false;\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderer);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderer, isRoot) {\n  const { renderPipes, renderableGC } = renderer;\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderable = container;\n    const renderPipeId = renderable.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(renderable, renderable.groupBlendMode, instructionSet);\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(renderable, instructionSet);\n      renderableGC.addRenderable(renderable, instructionSet);\n      renderable.didViewUpdate = false;\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderer);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\n\nexport { buildInstructions, collectAllRenderables };\n//# sourceMappingURL=buildInstructions.mjs.map\n","\"use strict\";\nfunction clearList(list, index) {\n  index || (index = 0);\n  for (let j = index; j < list.length; j++) {\n    if (list[j]) {\n      list[j] = null;\n    } else {\n      break;\n    }\n  }\n}\n\nexport { clearList };\n//# sourceMappingURL=clearList.mjs.map\n","import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { clearList } from './clearList.mjs';\nimport { multiplyColors } from './multiplyColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = multiplyColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags |= container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    const renderable = container;\n    if (renderable.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(renderable);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = multiplyColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from './bounds/Bounds.mjs';\nimport { buildInstructions } from './utils/buildInstructions.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    let originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    this._updateCachedRenderGroups(container.renderGroup, null);\n    this._updateRenderGroups(container.renderGroup);\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCachedRenderGroups(renderGroup, closestCacheAsTexture) {\n    if (renderGroup.isCachedAsTexture) {\n      if (!renderGroup.updateCacheTexture)\n        return;\n      closestCacheAsTexture = renderGroup;\n    }\n    renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n    for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--) {\n      this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n    }\n    renderGroup.invalidateMatrices();\n    if (renderGroup.isCachedAsTexture) {\n      if (renderGroup.textureNeedsUpdate) {\n        const bounds = renderGroup.root.getLocalBounds();\n        bounds.ceil();\n        const lastTexture = renderGroup.texture;\n        if (renderGroup.texture) {\n          TexturePool.returnTexture(renderGroup.texture);\n        }\n        const renderer = this._renderer;\n        const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n        const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n        renderGroup.texture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          resolution,\n          antialias\n        );\n        renderGroup._textureBounds || (renderGroup._textureBounds = new Bounds());\n        renderGroup._textureBounds.copyFrom(bounds);\n        if (lastTexture !== renderGroup.texture) {\n          if (renderGroup.renderGroupParent) {\n            renderGroup.renderGroupParent.structureDidChange = true;\n          }\n        }\n      }\n    } else if (renderGroup.texture) {\n      TexturePool.returnTexture(renderGroup.texture);\n      renderGroup.texture = null;\n    }\n  }\n  _updateRenderGroups(renderGroup) {\n    const renderer = this._renderer;\n    const renderPipes = renderer.renderPipes;\n    renderGroup.runOnRender();\n    renderGroup.instructionSet.renderPipes = renderPipes;\n    if (!renderGroup.structureDidChange) {\n      validateRenderables(renderGroup, renderPipes);\n    } else {\n      clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n    }\n    updateRenderGroupTransforms(renderGroup);\n    if (renderGroup.structureDidChange) {\n      renderGroup.structureDidChange = false;\n      buildInstructions(renderGroup, renderer);\n    } else {\n      this._updateRenderables(renderGroup);\n    }\n    renderGroup.childrenRenderablesToUpdate.index = 0;\n    renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate)\n      return;\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n    }\n  }\n  _updateRenderables(renderGroup) {\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n    for (let i = 0; i < index; i++) {\n      const container = list[i];\n      if (container.didViewUpdate) {\n        renderGroup.updateRenderable(container);\n      }\n    }\n    clearList(list, index);\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list, index } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from './BatchableSprite.mjs';\n\n\"use strict\";\nclass SpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableSprite = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableSprite);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableSprite = BigPool.get(BatchableSprite);\n    batchableSprite.renderable = sprite;\n    batchableSprite.transform = sprite.groupTransform;\n    batchableSprite.texture = sprite._texture;\n    batchableSprite.bounds = sprite.visualBounds;\n    batchableSprite.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableSprite;\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableSprite;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      BigPool.return(this._gpuSpriteHash[i]);\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"sprite\"\n};\n\nexport { SpritePipe };\n//# sourceMappingURL=SpritePipe.mjs.map\n","import { ExtensionType, extensions } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { DefaultBatcher } from './DefaultBatcher.mjs';\n\n\"use strict\";\nconst _BatcherPipe = class _BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batchersByInstructionSet = /* @__PURE__ */ Object.create(null);\n    /** A record of all active batchers, keyed by their names */\n    this._activeBatches = /* @__PURE__ */ Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init?.(this);\n  }\n  static getBatcher(name) {\n    return new this._availableBatchers[name]();\n  }\n  buildStart(instructionSet) {\n    let batchers = this._batchersByInstructionSet[instructionSet.uid];\n    if (!batchers) {\n      batchers = this._batchersByInstructionSet[instructionSet.uid] = /* @__PURE__ */ Object.create(null);\n      batchers.default || (batchers.default = new DefaultBatcher());\n    }\n    this._activeBatches = batchers;\n    this._activeBatch = this._activeBatches.default;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].begin();\n    }\n  }\n  addToBatch(batchableObject, instructionSet) {\n    if (this._activeBatch.name !== batchableObject.batcherName) {\n      this._activeBatch.break(instructionSet);\n      let batch = this._activeBatches[batchableObject.batcherName];\n      if (!batch) {\n        batch = this._activeBatches[batchableObject.batcherName] = _BatcherPipe.getBatcher(batchableObject.batcherName);\n        batch.begin();\n      }\n      this._activeBatch = batch;\n    }\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    this._activeBatch.break(instructionSet);\n    const batches = this._activeBatches;\n    for (const i in batches) {\n      const batch = batches[i];\n      const geometry = batch.geometry;\n      geometry.indexBuffer.setDataWithSize(batch.indexBuffer, batch.indexSize, true);\n      geometry.buffers[0].setDataWithSize(batch.attributeBuffer.float32View, batch.attributeSize, false);\n    }\n  }\n  upload(instructionSet) {\n    const batchers = this._batchersByInstructionSet[instructionSet.uid];\n    for (const i in batchers) {\n      const batcher = batchers[i];\n      const geometry = batcher.geometry;\n      if (batcher.dirty) {\n        batcher.dirty = false;\n        geometry.buffers[0].update(batcher.attributeSize * 4);\n      }\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = batcher.geometry;\n      const shader = batcher.shader;\n      this._adaptor.start(this, geometry, shader);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor = null;\n    for (const i in this._activeBatches) {\n      this._activeBatches[i].destroy();\n    }\n    this._activeBatches = null;\n  }\n};\n/** @ignore */\n_BatcherPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"batch\"\n};\n_BatcherPipe._availableBatchers = /* @__PURE__ */ Object.create(null);\nlet BatcherPipe = _BatcherPipe;\nextensions.handleByMap(ExtensionType.Batcher, BatcherPipe._availableBatchers);\nextensions.add(DefaultBatcher);\n\nexport { BatcherPipe };\n//# sourceMappingURL=BatcherPipe.mjs.map\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     * @ignore\n     */\n    this._state = State.for2d();\n    this.blendMode = options.blendMode;\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.clipToViewport = options.clipToViewport;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/**\n * The default filter settings\n * @static\n */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false,\n  clipToViewport: true\n};\nlet Filter = _Filter;\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n","var fragment = \"in vec2 vMaskCoord;\\nin vec2 vTextureCoord;\\n\\nuniform sampler2D uTexture;\\nuniform sampler2D uMaskTexture;\\n\\nuniform float uAlpha;\\nuniform vec4 uMaskClamp;\\nuniform float uInverse;\\n\\nout vec4 finalColor;\\n\\nvoid main(void)\\n{\\n    float clip = step(3.5,\\n        step(uMaskClamp.x, vMaskCoord.x) +\\n        step(uMaskClamp.y, vMaskCoord.y) +\\n        step(vMaskCoord.x, uMaskClamp.z) +\\n        step(vMaskCoord.y, uMaskClamp.w));\\n\\n    // TODO look into why this is needed\\n    float npmAlpha = uAlpha;\\n    vec4 original = texture(uTexture, vTextureCoord);\\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\\n\\n    float a = alphaMul * masky.r * npmAlpha * clip;\\n\\n    if (uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    finalColor = original * a;\\n}\\n\";\n\nexport { fragment as default };\n//# sourceMappingURL=mask.frag.mjs.map\n","var source = \"struct GlobalFilterUniforms {\\n  uInputSize:vec4<f32>,\\n  uInputPixel:vec4<f32>,\\n  uInputClamp:vec4<f32>,\\n  uOutputFrame:vec4<f32>,\\n  uGlobalFrame:vec4<f32>,\\n  uOutputTexture:vec4<f32>,\\n};\\n\\nstruct MaskUniforms {\\n  uFilterMatrix:mat3x3<f32>,\\n  uMaskClamp:vec4<f32>,\\n  uAlpha:f32,\\n  uInverse:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\\n@group(0) @binding(2) var uSampler : sampler;\\n\\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) filterUv : vec2<f32>,\\n};\\n\\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\\n{\\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\\n\\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\\n}\\n\\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);\\n}\\n\\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\\n{\\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}\\n\\nfn getSize() -> vec2<f32>\\n{\\n  return gfu.uGlobalFrame.zw;\\n}\\n\\n@vertex\\nfn mainVertex(\\n  @location(0) aPosition : vec2<f32>,\\n) -> VSOutput {\\n  return VSOutput(\\n   filterVertexPosition(aPosition),\\n   filterTextureCoord(aPosition),\\n   getFilterCoord(aPosition)\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) filterUv: vec2<f32>,\\n  @builtin(position) position: vec4<f32>\\n) -> @location(0) vec4<f32> {\\n\\n    var maskClamp = filterUniforms.uMaskClamp;\\n    var uAlpha = filterUniforms.uAlpha;\\n\\n    var clip = step(3.5,\\n      step(maskClamp.x, filterUv.x) +\\n      step(maskClamp.y, filterUv.y) +\\n      step(filterUv.x, maskClamp.z) +\\n      step(filterUv.y, maskClamp.w));\\n\\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\\n    var source = textureSample(uTexture, uSampler, uv);\\n    var alphaMul = 1.0 - uAlpha * (1.0 - mask.a);\\n\\n    var a: f32 = alphaMul * mask.r * uAlpha * clip;\\n\\n    if (filterUniforms.uInverse == 1.0) {\\n        a = 1.0 - a;\\n    }\\n\\n    return source * a;\\n}\\n\";\n\nexport { source as default };\n//# sourceMappingURL=mask.wgsl.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix.mjs';\nimport { Filter } from '../Filter.mjs';\nimport fragment from './mask.frag.mjs';\nimport vertex from './mask.vert.mjs';\nimport source from './mask.wgsl.mjs';\n\n\"use strict\";\nclass MaskFilter extends Filter {\n  constructor(options) {\n    const { sprite, ...rest } = options;\n    const textureMatrix = new TextureMatrix(sprite.texture);\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uMaskClamp: { value: textureMatrix.uClampFrame, type: \"vec4<f32>\" },\n      uAlpha: { value: 1, type: \"f32\" },\n      uInverse: { value: options.inverse ? 1 : 0, type: \"f32\" }\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"mask-filter\"\n    });\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMaskTexture: sprite.texture.source\n      }\n    });\n    this.sprite = sprite;\n    this._textureMatrix = textureMatrix;\n  }\n  set inverse(value) {\n    this.resources.filterUniforms.uniforms.uInverse = value ? 1 : 0;\n  }\n  get inverse() {\n    return this.resources.filterUniforms.uniforms.uInverse === 1;\n  }\n  apply(filterManager, input, output, clearMode) {\n    this._textureMatrix.texture = this.sprite.texture;\n    filterManager.calculateSpriteMatrix(\n      this.resources.filterUniforms.uniforms.uFilterMatrix,\n      this.sprite\n    ).prepend(this._textureMatrix.mapCoord);\n    this.resources.uMaskTexture = this.sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n}\n\nexport { MaskFilter };\n//# sourceMappingURL=MaskFilter.mjs.map\n","var vertex = \"in vec2 aPosition;\\n\\nout vec2 vTextureCoord;\\nout vec2 vMaskCoord;\\n\\n\\nuniform vec4 uInputSize;\\nuniform vec4 uOutputFrame;\\nuniform vec4 uOutputTexture;\\nuniform mat3 uFilterMatrix;\\n\\nvec4 filterVertexPosition(  vec2 aPosition )\\n{\\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\\n       \\n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\\n\\n    return vec4(position, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord(  vec2 aPosition )\\n{\\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\\n}\\n\\nvec2 getFilterCoord( vec2 aPosition )\\n{\\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\\n}   \\n\\nvoid main(void)\\n{\\n    gl_Position = filterVertexPosition(aPosition);\\n    vTextureCoord = filterTextureCoord(aPosition);\\n    vMaskCoord = getFilterCoord(aPosition);\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=mask.vert.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter.mjs';\nimport { Bounds } from '../../../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../renderers/types.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nclass AlphaMaskEffect extends FilterEffect {\n  constructor() {\n    super();\n    this.filters = [new MaskFilter({\n      sprite: new Sprite(Texture.EMPTY),\n      inverse: false,\n      resolution: \"inherit\",\n      antialias: \"inherit\"\n    })];\n  }\n  get sprite() {\n    return this.filters[0].sprite;\n  }\n  set sprite(value) {\n    this.filters[0].sprite = value;\n  }\n  get inverse() {\n    return this.filters[0].inverse;\n  }\n  set inverse(value) {\n    this.filters[0].inverse = value;\n  }\n}\nclass AlphaMaskPipe {\n  constructor(renderer) {\n    this._activeMaskStage = [];\n    this._renderer = renderer;\n  }\n  push(mask, maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false,\n      maskedContainer\n    });\n    mask.inverse = maskedContainer._maskOptions.inverse;\n    if (mask.renderMaskToTexture) {\n      const maskContainer = mask.mask;\n      maskContainer.includeInBuild = true;\n      collectAllRenderables(\n        maskContainer,\n        instructionSet,\n        renderer\n      );\n      maskContainer.includeInBuild = false;\n    }\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      maskedContainer,\n      inverse: maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  pop(mask, _maskedContainer, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"alphaMask\",\n      action: \"popMaskEnd\",\n      mask,\n      inverse: _maskedContainer._maskOptions.inverse,\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    const renderMask = instruction.mask.renderMaskToTexture;\n    if (instruction.action === \"pushMaskBegin\") {\n      const filterEffect = BigPool.get(AlphaMaskEffect);\n      filterEffect.inverse = instruction.inverse;\n      if (renderMask) {\n        instruction.mask.mask.measurable = true;\n        const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n        instruction.mask.mask.measurable = false;\n        bounds.ceil();\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n        const filterTexture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          colorTextureSource._resolution,\n          colorTextureSource.antialias\n        );\n        renderer.renderTarget.push(filterTexture, true);\n        renderer.globalUniforms.push({\n          offset: bounds,\n          worldColor: 4294967295\n        });\n        const sprite = filterEffect.sprite;\n        sprite.texture = filterTexture;\n        sprite.worldTransform.tx = bounds.minX;\n        sprite.worldTransform.ty = bounds.minY;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer,\n          filterTexture\n        });\n      } else {\n        filterEffect.sprite = instruction.mask.mask;\n        this._activeMaskStage.push({\n          filterEffect,\n          maskedContainer: instruction.maskedContainer\n        });\n      }\n    } else if (instruction.action === \"pushMaskEnd\") {\n      const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n      if (renderMask) {\n        if (renderer.type === RendererType.WEBGL) {\n          renderer.renderTarget.finishRenderPass();\n        }\n        renderer.renderTarget.pop();\n        renderer.globalUniforms.pop();\n      }\n      renderer.filter.push({\n        renderPipeId: \"filter\",\n        action: \"pushFilter\",\n        container: maskData.maskedContainer,\n        filterEffect: maskData.filterEffect,\n        canBundle: false\n      });\n    } else if (instruction.action === \"popMaskEnd\") {\n      renderer.filter.pop();\n      const maskData = this._activeMaskStage.pop();\n      if (renderMask) {\n        TexturePool.returnTexture(maskData.filterTexture);\n      }\n      BigPool.return(maskData.filterEffect);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n    this._activeMaskStage = null;\n  }\n}\n/** @ignore */\nAlphaMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"alphaMask\"\n};\n\nexport { AlphaMaskPipe };\n//# sourceMappingURL=AlphaMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"colorMask\"\n};\n\nexport { ColorMaskPipe };\n//# sourceMappingURL=ColorMaskPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions.mjs';\nimport { CLEAR } from '../../renderers/gl/const.mjs';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const.mjs';\n\n\"use strict\";\nclass StencilMaskPipe {\n  constructor(renderer) {\n    // used when building and also when executing..\n    this._maskStackHash = {};\n    this._maskHash = /* @__PURE__ */ new WeakMap();\n    this._renderer = renderer;\n  }\n  push(mask, _container, instructionSet) {\n    var _a;\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskBegin\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskContainer = effect.mask;\n    maskContainer.includeInBuild = true;\n    if (!this._maskHash.has(effect)) {\n      this._maskHash.set(effect, {\n        instructionsStart: 0,\n        instructionsLength: 0\n      });\n    }\n    const maskData = this._maskHash.get(effect);\n    maskData.instructionsStart = instructionSet.instructionSize;\n    collectAllRenderables(\n      maskContainer,\n      instructionSet,\n      renderer\n    );\n    maskContainer.includeInBuild = false;\n    renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"pushMaskEnd\",\n      mask,\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n    maskData.instructionsLength = instructionsLength;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n  }\n  pop(mask, _container, instructionSet) {\n    const effect = mask;\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    renderer.renderPipes.blendMode.setBlendMode(effect.mask, \"none\", instructionSet);\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskBegin\",\n      inverse: _container._maskOptions.inverse,\n      canBundle: false\n    });\n    const maskData = this._maskHash.get(mask);\n    for (let i = 0; i < maskData.instructionsLength; i++) {\n      instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n    }\n    instructionSet.add({\n      renderPipeId: \"stencilMask\",\n      action: \"popMaskEnd\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    var _a;\n    const renderer = this._renderer;\n    const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n    let maskStackIndex = (_a = this._maskStackHash)[renderTargetUid] ?? (_a[renderTargetUid] = 0);\n    if (instruction.action === \"pushMaskBegin\") {\n      renderer.renderTarget.ensureDepthStencil();\n      renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n      maskStackIndex++;\n      renderer.colorMask.setMask(0);\n    } else if (instruction.action === \"pushMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    } else if (instruction.action === \"popMaskBegin\") {\n      renderer.colorMask.setMask(0);\n      if (maskStackIndex !== 0) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n      } else {\n        renderer.renderTarget.clear(null, CLEAR.STENCIL);\n        renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n      }\n      maskStackIndex--;\n    } else if (instruction.action === \"popMaskEnd\") {\n      if (instruction.inverse) {\n        renderer.stencil.setStencilMode(STENCIL_MODES.INVERSE_MASK_ACTIVE, maskStackIndex);\n      } else {\n        renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n      }\n      renderer.colorMask.setMask(15);\n    }\n    this._maskStackHash[renderTargetUid] = maskStackIndex;\n  }\n  destroy() {\n    this._renderer = null;\n    this._maskStackHash = null;\n    this._maskHash = null;\n  }\n}\nStencilMaskPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"stencilMask\"\n};\n\nexport { StencilMaskPipe };\n//# sourceMappingURL=StencilMaskPipe.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  /**\n   * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n   * @param renderable - The renderable we are adding to the instruction set\n   * @param blendMode - The blend mode of the renderable\n   * @param instructionSet - The instruction set we are adding to\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced)\n        this._renderableList.push(renderable);\n      return;\n    }\n    this._activeBlendMode = blendMode;\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced) {\n      this._beginAdvancedBlendMode(instructionSet);\n      this._renderableList.push(renderable);\n    }\n  }\n  _beginAdvancedBlendMode(instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      renderables: [],\n      filterEffect,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   * @ignore\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   * @ignore\n   */\n  buildEnd(instructionSet) {\n    if (this._isAdvanced) {\n      this._endAdvancedBlendMode(instructionSet);\n    }\n  }\n  /**\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy(true);\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy(true);\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new RenderTexture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * A Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your container is complicated and needs to be reused multiple times.\n   * @param {GenerateTextureOptions | Container} options - Generate texture options.\n   * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n   * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n   * @param {number} [options.resolution] - The resolution of the texture being generated.\n   *        if no region is specified, defaults to the local bounds of the container.\n   * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n   * @returns a shiny new texture of the container passed in\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get globalUniformData() {\n    return this._currentGlobalUniformData;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    this._offset = 0;\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @param useOffset - this will spread out tasks so that they do not all run at the same time\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration, useOffset = true) {\n    const id = uid++;\n    let offset = 0;\n    if (useOffset) {\n      this._offset += 1e3;\n      offset = this._offset;\n    }\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      offset,\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.offset - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   * @ignore\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"scheduler\",\n  priority: 0\n};\n\nexport { SchedulerSystem };\n//# sourceMappingURL=SchedulerSystem.mjs.map\n","import { DOMAdapter } from '../environment/adapter.mjs';\nimport { VERSION } from './const.mjs';\n\n\"use strict\";\nlet saidHello = false;\nfunction sayHello(type) {\n  if (saidHello) {\n    return;\n  }\n  if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n    const args = [\n      `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\n\n`,\n      \"background: #E72264; padding:5px 0;\",\n      \"background: #6CA2EA; padding:5px 0;\",\n      \"background: #B5D33D; padding:5px 0;\",\n      \"background: #FED23F; padding:5px 0;\",\n      \"color: #FFFFFF; background: #E72264; padding:5px 0;\",\n      \"color: #E72264; background: #FFFFFF; padding:5px 0;\"\n    ];\n    globalThis.console.log(...args);\n  } else if (globalThis.console) {\n    globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n  }\n  saidHello = true;\n}\n\nexport { sayHello };\n//# sourceMappingURL=sayHello.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","\"use strict\";\nfunction cleanHash(hash) {\n  let clean = false;\n  for (const i in hash) {\n    if (hash[i] == void 0) {\n      clean = true;\n      break;\n    }\n  }\n  if (!clean)\n    return hash;\n  const cleanHash2 = /* @__PURE__ */ Object.create(null);\n  for (const i in hash) {\n    const value = hash[i];\n    if (value) {\n      cleanHash2[i] = value;\n    }\n  }\n  return cleanHash2;\n}\nfunction cleanArray(arr) {\n  let offset = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == void 0) {\n      offset++;\n    } else {\n      arr[i - offset] = arr[i];\n    }\n  }\n  arr.length -= offset;\n  return arr;\n}\n\nexport { cleanArray, cleanHash };\n//# sourceMappingURL=clean.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { cleanHash, cleanArray } from '../../../../utils/data/clean.mjs';\n\n\"use strict\";\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._managedRenderables = [];\n    this._managedHashes = [];\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  get enabled() {\n    return !!this._handler;\n  }\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency,\n        false\n      );\n      this._hashHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const hash of this._managedHashes) {\n            hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n          }\n        },\n        this._frequency\n      );\n      this._arrayHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const array of this._managedArrays) {\n            cleanArray(array.context[array.hash]);\n          }\n        },\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  addManagedHash(context, hash) {\n    this._managedHashes.push({ context, hash });\n  }\n  addManagedArray(context, hash) {\n    this._managedArrays.push({ context, hash });\n  }\n  prerender() {\n    this._now = performance.now();\n  }\n  addRenderable(renderable, instructionSet) {\n    if (!this.enabled)\n      return;\n    renderable._lastUsed = this._now;\n    if (renderable._lastInstructionTick === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastInstructionTick = instructionSet.tick;\n  }\n  /** Runs the scheduled garbage collection */\n  run() {\n    const now = performance.now();\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentIndex = renderGroup?.instructionSet?.tick ?? -1;\n      if (renderable._lastInstructionTick !== currentIndex && now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastInstructionTick = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length -= offset;\n  }\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n};\n/** @ignore */\n_RenderableGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\",\n  priority: 0\n};\n/** default options for the renderableGCSystem */\n_RenderableGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  renderableGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  renderableGCMaxUnusedTime: 6e4,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexport { RenderableGCSystem };\n//# sourceMappingURL=RenderableGCSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystem.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * @member {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { SchedulerSystem } from '../SchedulerSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook,\n  RenderableGCSystem,\n  SchedulerSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n","import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n"],"names":["localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","textureBit","fragment","textureBitGl","ensureAttributes","geometry","extractedData","i","attributes","attribute","attributeData","format","offset","instance","buffers","tempStride","tempStart","j","buffer","uid","stride","start","ensureStartAndStride","GpuStencilModesToPixi","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","BufferResource","constructor","size","super","this","_resourceType","_touched","_resourceId","_bufferResource","destroyed","on","onBufferChange","emit","destroy","destroyBuffer","_RenderTarget","descriptor","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","stencil","depth","push","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","pixelWidth","pixelHeight","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","off","RenderTarget","RenderTargetSystem","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","Map","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","renderableGC","addManagedHash","finishRenderPass","adaptor","renderTarget","renderStart","target","clear","clearColor","frame","length","copyFrom","rootRenderTarget","renderingToScreen","resource","globalThis","HTMLCanvasElement","document","body","contains","isRenderingToScreen","prerender","postrender","bind","renderSurface","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","Texture","x","y","pm","flipY","sign","identity","a","d","tx","ty","calculateProjection","startRenderPass","ALL","contextChange","pop","currentRenderTargetData","isTexture","get","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","Math","min","ensureDepthStencil","key","CanvasSource","test","getCanvasTexture","TextureSource","once","delete","destroyGpuRenderTarget","set","initGpuRenderTarget","UboSystem","_syncFunctionHash","_adaptor","_systemCheck","Error","ensureUniformGroup","uniformGroup","uniformData","getUniformGroupData","data","layout","usage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","uniformGroupData","dataInt32","uniforms","updateUniformGroup","isStatic","_dirtyId","synced","update","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","parsed","ubo","template","type","fragmentSrc","join","Function","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","uniformParsers","value","uniform","red","CustomRenderPipe","updateRenderable","destroyRenderable","validateRenderable","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","extension","WebGLPipes","WebGPUPipes","CanvasPipes","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","tempMatrix","RenderGroupPipe","addRenderGroup","isCachedAsTexture","_addRenderableCacheAsTexture","_addRenderableDirect","_executeCacheAsTexture","_executeDirect","_batchableRenderGroup","return","batchableRenderGroup","BatchableSprite","renderable","root","transform","relativeGroupTransform","bounds","_textureBounds","addToBatch","textureNeedsUpdate","worldTransformMatrix","translate","globalUniforms","worldColor","_batcher","updateElement","inverseParentTextureTransform","worldColorAlpha","collectAllRenderables","rendererOrPipes","globalDisplayStatus","includeInBuild","sortableChildren","sortChildren","isSimple","blendMode","setBlendMode","groupBlendMode","didViewUpdate","children","collectAllRenderablesSimple","collectAllRenderablesAdvanced","effects","effect","pipe","clearList","list","index","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","worldTransform","appendFrom","multiplyColors","groupColor","groupAlpha","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","renderGroupChildren","updateFlags","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","structureDidChange","groupColorAlpha","localBlendMode","localDisplayStatus","RenderGroupSystem","originalLocalTransform","_updateCachedRenderGroups","_updateRenderGroups","uniformBatch","renderEnd","closestCacheAsTexture","updateCacheTexture","_parentCacheAsTextureRenderGroup","invalidateMatrices","getLocalBounds","ceil","lastTexture","TexturePool","returnTexture","textureOptions","view","getOptimalTexture","Bounds","runOnRender","childrenRenderablesToUpdate","rebuildRequired","validateRenderables","reset","buildStart","colorMask","buildEnd","buildInstructions","_updateRenderables","upload","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","_destroyRenderableBound","sprite","gpuSprite","_getGpuSprite","_updateBatchableSprite","checkAndUpdateTexture","_texture","batchableSprite","visualBounds","_initGPUSprite","groupTransform","roundPixels","_roundPixels","_BatcherPipe","state","State","for2d","_batchersByInstructionSet","_activeBatches","init","getBatcher","_availableBatchers","batchers","default","DefaultBatcher","_activeBatch","begin","batchableObject","batcherName","batches","indexBuffer","setDataWithSize","indexSize","attributeBuffer","float32View","attributeSize","batcher","dirty","action","shader","BatcherPipe","handleByMap","Batcher","_Filter","Shader","options","enabled","_state","padding","blendRequired","clipToViewport","addResource","apply","filterManager","input","output","clearMode","applyFilter","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","MaskFilter","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","uMaskClamp","uClampFrame","uAlpha","uInverse","inverse","entryPoint","resources","uMaskTexture","_textureMatrix","calculateSpriteMatrix","prepend","mapCoord","tempBounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","_maskOptions","canBundle","renderMaskToTexture","maskContainer","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","colorTextureSource","filterTexture","minX","minY","maskData","WEBGL","filter","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","has","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","setStencilMode","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","ref","BlendModePipe","_isAdvanced","_filterHash","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","warn","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","image","Image","src","base64","defaultImageOptions","quality","canvas","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","createElement","filename","href","appendChild","click","removeChild","log","console","style","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","textureSourceOptions","Array","isArray","shared","region","copyTo","rectangle","max","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","SchedulerSystem","_tasks","_offset","Ticker","system","_update","repeat","func","duration","useOffset","id","performance","now","last","cancel","splice","task","elapsed","remove","saidHello","HelloSystem","hello","context","webGLVersion","getNavigator","userAgent","toLowerCase","indexOf","args","sayHello","cleanHash","hash","clean","cleanHash2","cleanArray","arr","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","renderableGCActive","_handler","scheduler","run","_hashHandler","_arrayHandler","array","addManagedArray","_now","_lastUsed","_lastInstructionTick","_removeRenderable","tick","managedRenderables","currentIndex","RenderableGCSystem","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","managedTextures","autoGarbageCollect","unload","TextureGCSystem","_ViewSystem","autoDensity","deprecation","screen","createCanvas","transparent","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","SharedRenderPipes","canvasCache","onDestroy","color32BitToUniform","abgr","out","topology","packAsQuad","_attributeStart","_batch"],"sourceRoot":""}