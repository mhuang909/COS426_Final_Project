{"version":3,"file":"751.23d62992450342dd305e.js","mappings":"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","sources":["webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/graphics/gpu/GpuGraphicsAdaptor.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/mesh/gpu/GpuMeshAdapter.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/batcher/gpu/GpuBatchAdaptor.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/BindGroupSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/buffer/GpuBufferSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuColorMaskSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuDeviceSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuEncoderSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuStencilSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/createUboElementsWGSL.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/createUboSyncFunctionWGSL.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuUboSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/buffer/UboBatch.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuUniformBatchPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/pipeline/PipelineSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTarget.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuShaderSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuBlendModesToPixi.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStateSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadVideoSource.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/GpuTextureSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/renderers/gpu/WebGPURenderer.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup.mjs';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { localUniformBitGroup2 } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GpuGraphicsAdaptor {\n  init() {\n    const localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"graphics\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(getMaxTexturesPerBatch()),\n        localUniformBitGroup2,\n        roundPixelsBit\n      ]\n    });\n    this.shader = new Shader({\n      gpuProgram,\n      resources: {\n        // added on the fly!\n        localUniforms\n      }\n    });\n  }\n  execute(graphicsPipe, renderable) {\n    const context = renderable.context;\n    const shader = context.customShader || this.shader;\n    const renderer = graphicsPipe.renderer;\n    const contextSystem = renderer.graphicsContext;\n    const {\n      batcher,\n      instructions\n    } = contextSystem.getContextRenderData(context);\n    const encoder = renderer.encoder;\n    encoder.setGeometry(batcher.geometry, shader.gpuProgram);\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.setBindGroup(0, globalUniformsBindGroup, shader.gpuProgram);\n    const localBindGroup = renderer.renderPipes.uniformBatch.getUniformBindGroup(shader.resources.localUniforms, true);\n    encoder.setBindGroup(2, localBindGroup, shader.gpuProgram);\n    const batches = instructions.instructions;\n    let topology = null;\n    for (let i = 0; i < instructions.instructionSize; i++) {\n      const batch = batches[i];\n      if (batch.topology !== topology) {\n        topology = batch.topology;\n        encoder.setPipelineFromGeometryProgramAndState(\n          batcher.geometry,\n          shader.gpuProgram,\n          graphicsPipe.state,\n          batch.topology\n        );\n      }\n      shader.groups[1] = batch.bindGroup;\n      if (!batch.gpuBindGroup) {\n        const textureBatch = batch.textures;\n        batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n        batch.gpuBindGroup = renderer.bindGroup.getBindGroup(\n          batch.bindGroup,\n          shader.gpuProgram,\n          1\n        );\n      }\n      encoder.setBindGroup(1, batch.bindGroup, shader.gpuProgram);\n      encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n  }\n  destroy() {\n    this.shader.destroy(true);\n    this.shader = null;\n  }\n}\n/** @ignore */\nGpuGraphicsAdaptor.extension = {\n  type: [\n    ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"graphics\"\n};\n\nexport { GpuGraphicsAdaptor };\n//# sourceMappingURL=GpuGraphicsAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\n\n\"use strict\";\nclass GpuMeshAdapter {\n  init() {\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"mesh\",\n      bits: [\n        localUniformBit,\n        textureBit,\n        roundPixelsBit\n      ]\n    });\n    this._shader = new Shader({\n      gpuProgram,\n      resources: {\n        uTexture: Texture.EMPTY._source,\n        uSampler: Texture.EMPTY._source.style,\n        textureUniforms: {\n          uTextureMatrix: { type: \"mat3x3<f32>\", value: new Matrix() }\n        }\n      }\n    });\n  }\n  execute(meshPipe, mesh) {\n    const renderer = meshPipe.renderer;\n    let shader = mesh._shader;\n    if (!shader) {\n      shader = this._shader;\n      shader.groups[2] = renderer.texture.getTextureBindGroup(mesh.texture);\n    } else if (!shader.gpuProgram) {\n      warn(\"Mesh shader has no gpuProgram\", mesh.shader);\n      return;\n    }\n    const gpuProgram = shader.gpuProgram;\n    if (gpuProgram.autoAssignGlobalUniforms) {\n      shader.groups[0] = renderer.globalUniforms.bindGroup;\n    }\n    if (gpuProgram.autoAssignLocalUniforms) {\n      const localUniforms = meshPipe.localUniforms;\n      shader.groups[1] = renderer.renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n    }\n    renderer.encoder.draw({\n      geometry: mesh._geometry,\n      shader,\n      state: mesh.state\n    });\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\n/** @ignore */\nGpuMeshAdapter.extension = {\n  type: [\n    ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"mesh\"\n};\n\nexport { GpuMeshAdapter };\n//# sourceMappingURL=GpuMeshAdapter.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup.mjs';\n\n\"use strict\";\nconst tempState = State.for2d();\nclass GpuBatchAdaptor {\n  start(batchPipe, geometry, shader) {\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    const program = shader.gpuProgram;\n    this._shader = shader;\n    this._geometry = geometry;\n    encoder.setGeometry(geometry, program);\n    tempState.blendMode = \"normal\";\n    renderer.pipeline.getPipeline(\n      geometry,\n      program,\n      tempState\n    );\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.resetBindGroup(1);\n    encoder.setBindGroup(0, globalUniformsBindGroup, program);\n  }\n  execute(batchPipe, batch) {\n    const program = this._shader.gpuProgram;\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    if (!batch.bindGroup) {\n      const textureBatch = batch.textures;\n      batch.bindGroup = getTextureBatchBindGroup(textureBatch.textures, textureBatch.count);\n    }\n    tempState.blendMode = batch.blendMode;\n    const gpuBindGroup = renderer.bindGroup.getBindGroup(\n      batch.bindGroup,\n      program,\n      1\n    );\n    const pipeline = renderer.pipeline.getPipeline(\n      this._geometry,\n      program,\n      tempState,\n      batch.topology\n    );\n    batch.bindGroup._touch(renderer.textureGC.count);\n    encoder.setPipeline(pipeline);\n    encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n    encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n  }\n}\n/** @ignore */\nGpuBatchAdaptor.extension = {\n  type: [\n    ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"batch\"\n};\n\nexport { GpuBatchAdaptor };\n//# sourceMappingURL=GpuBatchAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass BindGroupSystem {\n  constructor(renderer) {\n    this._hash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_hash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getBindGroup(bindGroup, program, groupIndex) {\n    bindGroup._updateKey();\n    const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n    return gpuBindGroup;\n  }\n  _createBindGroup(group, program, groupIndex) {\n    const device = this._gpu.device;\n    const groupLayout = program.layout[groupIndex];\n    const entries = [];\n    const renderer = this._renderer;\n    for (const j in groupLayout) {\n      const resource = group.resources[j] ?? group.resources[groupLayout[j]];\n      let gpuResource;\n      if (resource._resourceType === \"uniformGroup\") {\n        const uniformGroup = resource;\n        renderer.ubo.updateUniformGroup(uniformGroup);\n        const buffer = uniformGroup.buffer;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"buffer\") {\n        const buffer = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"bufferResource\") {\n        const bufferResource = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n          offset: bufferResource.offset,\n          size: bufferResource.size\n        };\n      } else if (resource._resourceType === \"textureSampler\") {\n        const sampler = resource;\n        gpuResource = renderer.texture.getGpuSampler(sampler);\n      } else if (resource._resourceType === \"textureSource\") {\n        const texture = resource;\n        gpuResource = renderer.texture.getGpuSource(texture).createView({});\n      }\n      entries.push({\n        binding: groupLayout[j],\n        resource: gpuResource\n      });\n    }\n    const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n    const gpuBindGroup = device.createBindGroup({\n      layout,\n      entries\n    });\n    this._hash[group._key] = gpuBindGroup;\n    return gpuBindGroup;\n  }\n  destroy() {\n    for (const key of Object.keys(this._hash)) {\n      this._hash[key] = null;\n    }\n    this._hash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBindGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"bindGroup\"\n};\n\nexport { BindGroupSystem };\n//# sourceMappingURL=BindGroupSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { fastCopy } from '../../shared/buffer/utils/fastCopy.mjs';\n\n\"use strict\";\nclass GpuBufferSystem {\n  constructor(renderer) {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    this._managedBuffers = [];\n    renderer.renderableGC.addManagedHash(this, \"_gpuBuffers\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getGPUBuffer(buffer) {\n    return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n  }\n  updateBuffer(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n    const data = buffer.data;\n    if (buffer._updateID && data) {\n      buffer._updateID = 0;\n      this._gpu.device.queue.writeBuffer(\n        gpuBuffer,\n        0,\n        data.buffer,\n        0,\n        // round to the nearest 4 bytes\n        (buffer._updateSize || data.byteLength) + 3 & ~3\n      );\n    }\n    return gpuBuffer;\n  }\n  /** dispose all WebGL resources of all managed buffers */\n  destroyAll() {\n    for (const id in this._gpuBuffers) {\n      this._gpuBuffers[id].destroy();\n    }\n    this._gpuBuffers = {};\n  }\n  createGPUBuffer(buffer) {\n    if (!this._gpuBuffers[buffer.uid]) {\n      buffer.on(\"update\", this.updateBuffer, this);\n      buffer.on(\"change\", this.onBufferChange, this);\n      buffer.on(\"destroy\", this.onBufferDestroy, this);\n      this._managedBuffers.push(buffer);\n    }\n    const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);\n    buffer._updateID = 0;\n    if (buffer.data) {\n      fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange());\n      gpuBuffer.unmap();\n    }\n    this._gpuBuffers[buffer.uid] = gpuBuffer;\n    return gpuBuffer;\n  }\n  onBufferChange(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid];\n    gpuBuffer.destroy();\n    buffer._updateID = 0;\n    this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);\n  }\n  /**\n   * Disposes buffer\n   * @param buffer - buffer with data\n   */\n  onBufferDestroy(buffer) {\n    this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);\n    this._destroyBuffer(buffer);\n  }\n  destroy() {\n    this._managedBuffers.forEach((buffer) => this._destroyBuffer(buffer));\n    this._managedBuffers = null;\n    this._gpuBuffers = null;\n  }\n  _destroyBuffer(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid];\n    gpuBuffer.destroy();\n    buffer.off(\"update\", this.updateBuffer, this);\n    buffer.off(\"change\", this.onBufferChange, this);\n    buffer.off(\"destroy\", this.onBufferDestroy, this);\n    this._gpuBuffers[buffer.uid] = null;\n  }\n}\n/** @ignore */\nGpuBufferSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"buffer\"\n};\n\nexport { GpuBufferSystem };\n//# sourceMappingURL=GpuBufferSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuColorMaskSystem {\n  constructor(renderer) {\n    this._colorMaskCache = 15;\n    this._renderer = renderer;\n  }\n  setMask(colorMask) {\n    if (this._colorMaskCache === colorMask)\n      return;\n    this._colorMaskCache = colorMask;\n    this._renderer.pipeline.setColorMask(colorMask);\n  }\n  destroy() {\n    this._renderer = null;\n    this._colorMaskCache = null;\n  }\n}\n/** @ignore */\nGpuColorMaskSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"colorMask\"\n};\n\nexport { GpuColorMaskSystem };\n//# sourceMappingURL=GpuColorMaskSystem.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuDeviceSystem {\n  /**\n   * @param {WebGPURenderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  async init(options) {\n    if (this._initPromise)\n      return this._initPromise;\n    this._initPromise = this._createDeviceAndAdaptor(options).then((gpu) => {\n      this.gpu = gpu;\n      this._renderer.runners.contextChange.emit(this.gpu);\n    });\n    return this._initPromise;\n  }\n  /**\n   * Handle the context change event\n   * @param gpu\n   */\n  contextChange(gpu) {\n    this._renderer.gpu = gpu;\n  }\n  /**\n   * Helper class to create a WebGL Context\n   * @param {object} options - An options object that gets passed in to the canvas element containing the\n   *    context attributes\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n   * @returns {WebGLRenderingContext} the WebGL context\n   */\n  async _createDeviceAndAdaptor(options) {\n    const adapter = await DOMAdapter.get().getNavigator().gpu.requestAdapter({\n      powerPreference: options.powerPreference,\n      forceFallbackAdapter: options.forceFallbackAdapter\n    });\n    const requiredFeatures = [\n      \"texture-compression-bc\",\n      \"texture-compression-astc\",\n      \"texture-compression-etc2\"\n    ].filter((feature) => adapter.features.has(feature));\n    const device = await adapter.requestDevice({\n      requiredFeatures\n    });\n    return { adapter, device };\n  }\n  destroy() {\n    this.gpu = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuDeviceSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"device\"\n};\n/** The default options for the GpuDeviceSystem. */\nGpuDeviceSystem.defaultOptions = {\n  /**\n   * {@link WebGPUOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * Force the use of the fallback adapter\n   * @default false\n   */\n  forceFallbackAdapter: false\n};\n\nexport { GpuDeviceSystem };\n//# sourceMappingURL=GpuDeviceSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuEncoderSystem {\n  constructor(renderer) {\n    this._boundBindGroup = /* @__PURE__ */ Object.create(null);\n    this._boundVertexBuffer = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  renderStart() {\n    this.commandFinished = new Promise((resolve) => {\n      this._resolveCommandFinished = resolve;\n    });\n    this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n  }\n  beginRenderPass(gpuRenderTarget) {\n    this.endRenderPass();\n    this._clearCache();\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n  }\n  endRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n    }\n    this.renderPassEncoder = null;\n  }\n  setViewport(viewport) {\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n  }\n  setPipelineFromGeometryProgramAndState(geometry, program, state, topology) {\n    const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n    this.setPipeline(pipeline);\n  }\n  setPipeline(pipeline) {\n    if (this._boundPipeline === pipeline)\n      return;\n    this._boundPipeline = pipeline;\n    this.renderPassEncoder.setPipeline(pipeline);\n  }\n  _setVertexBuffer(index, buffer) {\n    if (this._boundVertexBuffer[index] === buffer)\n      return;\n    this._boundVertexBuffer[index] = buffer;\n    this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n  }\n  _setIndexBuffer(buffer) {\n    if (this._boundIndexBuffer === buffer)\n      return;\n    this._boundIndexBuffer = buffer;\n    const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? \"uint16\" : \"uint32\";\n    this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n  }\n  resetBindGroup(index) {\n    this._boundBindGroup[index] = null;\n  }\n  setBindGroup(index, bindGroup, program) {\n    if (this._boundBindGroup[index] === bindGroup)\n      return;\n    this._boundBindGroup[index] = bindGroup;\n    bindGroup._touch(this._renderer.textureGC.count);\n    const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n    this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n  }\n  setGeometry(geometry, program) {\n    const buffersToBind = this._renderer.pipeline.getBufferNamesToBind(geometry, program);\n    for (const i in buffersToBind) {\n      this._setVertexBuffer(i, geometry.attributes[buffersToBind[i]].buffer);\n    }\n    if (geometry.indexBuffer) {\n      this._setIndexBuffer(geometry.indexBuffer);\n    }\n  }\n  _setShaderBindGroups(shader, skipSync) {\n    for (const i in shader.groups) {\n      const bindGroup = shader.groups[i];\n      if (!skipSync) {\n        this._syncBindGroup(bindGroup);\n      }\n      this.setBindGroup(i, bindGroup, shader.gpuProgram);\n    }\n  }\n  _syncBindGroup(bindGroup) {\n    for (const j in bindGroup.resources) {\n      const resource = bindGroup.resources[j];\n      if (resource.isUniformGroup) {\n        this._renderer.ubo.updateUniformGroup(resource);\n      }\n    }\n  }\n  draw(options) {\n    const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n    this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n    this.setGeometry(geometry, shader.gpuProgram);\n    this._setShaderBindGroups(shader, skipSync);\n    if (geometry.indexBuffer) {\n      this.renderPassEncoder.drawIndexed(\n        size || geometry.indexBuffer.data.length,\n        instanceCount ?? geometry.instanceCount,\n        start || 0\n      );\n    } else {\n      this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount ?? geometry.instanceCount, start || 0);\n    }\n  }\n  finishRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n      this.renderPassEncoder = null;\n    }\n  }\n  postrender() {\n    this.finishRenderPass();\n    this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n    this._resolveCommandFinished();\n    this.commandEncoder = null;\n  }\n  // restores a render pass if finishRenderPass was called\n  // not optimised as really used for debugging!\n  // used when we want to stop drawing and log a texture..\n  restoreRenderPass() {\n    const descriptor = this._renderer.renderTarget.adaptor.getDescriptor(\n      this._renderer.renderTarget.renderTarget,\n      false,\n      [0, 0, 0, 1]\n    );\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n    const boundPipeline = this._boundPipeline;\n    const boundVertexBuffer = { ...this._boundVertexBuffer };\n    const boundIndexBuffer = this._boundIndexBuffer;\n    const boundBindGroup = { ...this._boundBindGroup };\n    this._clearCache();\n    const viewport = this._renderer.renderTarget.viewport;\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    this.setPipeline(boundPipeline);\n    for (const i in boundVertexBuffer) {\n      this._setVertexBuffer(i, boundVertexBuffer[i]);\n    }\n    for (const i in boundBindGroup) {\n      this.setBindGroup(i, boundBindGroup[i], null);\n    }\n    this._setIndexBuffer(boundIndexBuffer);\n  }\n  _clearCache() {\n    for (let i = 0; i < 16; i++) {\n      this._boundBindGroup[i] = null;\n      this._boundVertexBuffer[i] = null;\n    }\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this._gpu = null;\n    this._boundBindGroup = null;\n    this._boundVertexBuffer = null;\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n}\n/** @ignore */\nGpuEncoderSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"encoder\",\n  priority: 1\n};\n\nexport { GpuEncoderSystem };\n//# sourceMappingURL=GpuEncoderSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { STENCIL_MODES } from '../shared/state/const.mjs';\n\n\"use strict\";\nclass GpuStencilSystem {\n  constructor(renderer) {\n    this._renderTargetStencilState = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  onRenderTargetChange(renderTarget) {\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: STENCIL_MODES.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this._activeRenderTarget = renderTarget;\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    const renderer = this._renderer;\n    renderer.pipeline.setStencilMode(stencilMode);\n    renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n  }\n  destroy() {\n    this._renderer.renderTarget.onRenderTargetChange.remove(this);\n    this._renderer = null;\n    this._activeRenderTarget = null;\n    this._renderTargetStencilState = null;\n  }\n}\n/** @ignore */\nGpuStencilSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"stencil\"\n};\n\nexport { GpuStencilSystem };\n//# sourceMappingURL=GpuStencilSystem.mjs.map\n","\"use strict\";\nconst WGSL_ALIGN_SIZE_DATA = {\n  i32: { align: 4, size: 4 },\n  u32: { align: 4, size: 4 },\n  f32: { align: 4, size: 4 },\n  f16: { align: 2, size: 2 },\n  \"vec2<i32>\": { align: 8, size: 8 },\n  \"vec2<u32>\": { align: 8, size: 8 },\n  \"vec2<f32>\": { align: 8, size: 8 },\n  \"vec2<f16>\": { align: 4, size: 4 },\n  \"vec3<i32>\": { align: 16, size: 12 },\n  \"vec3<u32>\": { align: 16, size: 12 },\n  \"vec3<f32>\": { align: 16, size: 12 },\n  \"vec3<f16>\": { align: 8, size: 6 },\n  \"vec4<i32>\": { align: 16, size: 16 },\n  \"vec4<u32>\": { align: 16, size: 16 },\n  \"vec4<f32>\": { align: 16, size: 16 },\n  \"vec4<f16>\": { align: 8, size: 8 },\n  \"mat2x2<f32>\": { align: 8, size: 16 },\n  \"mat2x2<f16>\": { align: 4, size: 8 },\n  \"mat3x2<f32>\": { align: 8, size: 24 },\n  \"mat3x2<f16>\": { align: 4, size: 12 },\n  \"mat4x2<f32>\": { align: 8, size: 32 },\n  \"mat4x2<f16>\": { align: 4, size: 16 },\n  \"mat2x3<f32>\": { align: 16, size: 32 },\n  \"mat2x3<f16>\": { align: 8, size: 16 },\n  \"mat3x3<f32>\": { align: 16, size: 48 },\n  \"mat3x3<f16>\": { align: 8, size: 24 },\n  \"mat4x3<f32>\": { align: 16, size: 64 },\n  \"mat4x3<f16>\": { align: 8, size: 32 },\n  \"mat2x4<f32>\": { align: 16, size: 32 },\n  \"mat2x4<f16>\": { align: 8, size: 16 },\n  \"mat3x4<f32>\": { align: 16, size: 48 },\n  \"mat3x4<f16>\": { align: 8, size: 24 },\n  \"mat4x4<f32>\": { align: 16, size: 64 },\n  \"mat4x4<f16>\": { align: 8, size: 32 }\n};\nfunction createUboElementsWGSL(uniformData) {\n  const uboElements = uniformData.map((data) => ({\n    data,\n    offset: 0,\n    size: 0\n  }));\n  let offset = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    let size = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].size;\n    const align = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].align;\n    if (!WGSL_ALIGN_SIZE_DATA[uboElement.data.type]) {\n      throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${uboElement.data.type}`);\n    }\n    if (uboElement.data.size > 1) {\n      size = Math.max(size, align) * uboElement.data.size;\n    }\n    offset = Math.ceil(offset / align) * align;\n    uboElement.size = size;\n    uboElement.offset = offset;\n    offset += size;\n  }\n  offset = Math.ceil(offset / 16) * 16;\n  return { uboElements, size: offset };\n}\n\nexport { WGSL_ALIGN_SIZE_DATA, createUboElementsWGSL };\n//# sourceMappingURL=createUboElementsWGSL.mjs.map\n","import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL.mjs';\n\n\"use strict\";\nfunction generateArraySyncWGSL(uboElement, offsetToAdd) {\n  const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n  const remainder = (align - size) / 4;\n  const data = uboElement.data.type.indexOf(\"i32\") >= 0 ? \"dataInt32\" : \"data\";\n  return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : \"\"}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 ${data}[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : \"\"}\n         }\n     `;\n}\n\nexport { generateArraySyncWGSL };\n//# sourceMappingURL=generateArraySyncWGSL.mjs.map\n","import { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction.mjs';\nimport { uboSyncFunctionsWGSL } from '../../../shared/shader/utils/uboSyncFunctions.mjs';\nimport { generateArraySyncWGSL } from './generateArraySyncWGSL.mjs';\n\n\"use strict\";\nfunction createUboSyncFunctionWGSL(uboElements) {\n  return createUboSyncFunction(\n    uboElements,\n    \"uboWgsl\",\n    generateArraySyncWGSL,\n    uboSyncFunctionsWGSL\n  );\n}\n\nexport { createUboSyncFunctionWGSL };\n//# sourceMappingURL=createUboSyncFunctionWGSL.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { UboSystem } from '../shared/shader/UboSystem.mjs';\nimport { createUboElementsWGSL } from './shader/utils/createUboElementsWGSL.mjs';\nimport { createUboSyncFunctionWGSL } from './shader/utils/createUboSyncFunctionWGSL.mjs';\n\n\"use strict\";\nclass GpuUboSystem extends UboSystem {\n  constructor() {\n    super({\n      createUboElements: createUboElementsWGSL,\n      generateUboSync: createUboSyncFunctionWGSL\n    });\n  }\n}\n/** @ignore */\nGpuUboSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"ubo\"\n};\n\nexport { GpuUboSystem };\n//# sourceMappingURL=GpuUboSystem.mjs.map\n","\"use strict\";\nclass UboBatch {\n  constructor({ minUniformOffsetAlignment }) {\n    this._minUniformOffsetAlignment = 256;\n    this.byteIndex = 0;\n    this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n    this.data = new Float32Array(65535);\n  }\n  clear() {\n    this.byteIndex = 0;\n  }\n  addEmptyGroup(size) {\n    if (size > this._minUniformOffsetAlignment / 4) {\n      throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n    }\n    const start = this.byteIndex;\n    let newSize = start + size * 4;\n    newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n    if (newSize > this.data.length * 4) {\n      throw new Error(\"UniformBufferBatch: ubo batch got too big\");\n    }\n    this.byteIndex = newSize;\n    return start;\n  }\n  addGroup(array) {\n    const offset = this.addEmptyGroup(array.length);\n    for (let i = 0; i < array.length; i++) {\n      this.data[offset / 4 + i] = array[i];\n    }\n    return offset;\n  }\n  destroy() {\n    this.data = null;\n  }\n}\n\nexport { UboBatch };\n//# sourceMappingURL=UboBatch.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Buffer } from '../shared/buffer/Buffer.mjs';\nimport { BufferResource } from '../shared/buffer/BufferResource.mjs';\nimport { BufferUsage } from '../shared/buffer/const.mjs';\nimport { UboBatch } from './buffer/UboBatch.mjs';\nimport { BindGroup } from './shader/BindGroup.mjs';\n\n\"use strict\";\nconst minUniformOffsetAlignment = 128;\nclass GpuUniformBatchPipe {\n  constructor(renderer) {\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    // number of buffers..\n    this._buffers = [];\n    this._bindGroups = [];\n    this._bufferResources = [];\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    this._batchBuffer = new UboBatch({ minUniformOffsetAlignment });\n    const totalBuffers = 256 / minUniformOffsetAlignment;\n    for (let i = 0; i < totalBuffers; i++) {\n      let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n      if (i === 0)\n        usage |= BufferUsage.COPY_SRC;\n      this._buffers.push(new Buffer({\n        data: this._batchBuffer.data,\n        usage\n      }));\n    }\n  }\n  renderEnd() {\n    this._uploadBindGroups();\n    this._resetBindGroups();\n  }\n  _resetBindGroups() {\n    for (const i in this._bindGroupHash) {\n      this._bindGroupHash[i] = null;\n    }\n    this._batchBuffer.clear();\n  }\n  // just works for single bind groups for now\n  getUniformBindGroup(group, duplicate) {\n    if (!duplicate && this._bindGroupHash[group.uid]) {\n      return this._bindGroupHash[group.uid];\n    }\n    this._renderer.ubo.ensureUniformGroup(group);\n    const data = group.buffer.data;\n    const offset = this._batchBuffer.addEmptyGroup(data.length);\n    this._renderer.ubo.syncUniformGroup(group, this._batchBuffer.data, offset / 4);\n    this._bindGroupHash[group.uid] = this._getBindGroup(offset / minUniformOffsetAlignment);\n    return this._bindGroupHash[group.uid];\n  }\n  getUboResource(group) {\n    this._renderer.ubo.updateUniformGroup(group);\n    const data = group.buffer.data;\n    const offset = this._batchBuffer.addGroup(data);\n    return this._getBufferResource(offset / minUniformOffsetAlignment);\n  }\n  getArrayBindGroup(data) {\n    const offset = this._batchBuffer.addGroup(data);\n    return this._getBindGroup(offset / minUniformOffsetAlignment);\n  }\n  getArrayBufferResource(data) {\n    const offset = this._batchBuffer.addGroup(data);\n    const index = offset / minUniformOffsetAlignment;\n    return this._getBufferResource(index);\n  }\n  _getBufferResource(index) {\n    if (!this._bufferResources[index]) {\n      const buffer = this._buffers[index % 2];\n      this._bufferResources[index] = new BufferResource({\n        buffer,\n        offset: (index / 2 | 0) * 256,\n        size: minUniformOffsetAlignment\n      });\n    }\n    return this._bufferResources[index];\n  }\n  _getBindGroup(index) {\n    if (!this._bindGroups[index]) {\n      const bindGroup = new BindGroup({\n        0: this._getBufferResource(index)\n      });\n      this._bindGroups[index] = bindGroup;\n    }\n    return this._bindGroups[index];\n  }\n  _uploadBindGroups() {\n    const bufferSystem = this._renderer.buffer;\n    const firstBuffer = this._buffers[0];\n    firstBuffer.update(this._batchBuffer.byteIndex);\n    bufferSystem.updateBuffer(firstBuffer);\n    const commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n    for (let i = 1; i < this._buffers.length; i++) {\n      const buffer = this._buffers[i];\n      commandEncoder.copyBufferToBuffer(\n        bufferSystem.getGPUBuffer(firstBuffer),\n        minUniformOffsetAlignment,\n        bufferSystem.getGPUBuffer(buffer),\n        0,\n        this._batchBuffer.byteIndex\n      );\n    }\n    this._renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n  }\n  destroy() {\n    for (let i = 0; i < this._bindGroups.length; i++) {\n      this._bindGroups[i].destroy();\n    }\n    this._bindGroups = null;\n    this._bindGroupHash = null;\n    for (let i = 0; i < this._buffers.length; i++) {\n      this._buffers[i].destroy();\n    }\n    this._buffers = null;\n    for (let i = 0; i < this._bufferResources.length; i++) {\n      this._bufferResources[i].destroy();\n    }\n    this._bufferResources = null;\n    this._batchBuffer.destroy();\n    this._bindGroupHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuUniformBatchPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"uniformBatch\"\n};\n\nexport { GpuUniformBatchPipe };\n//# sourceMappingURL=GpuUniformBatchPipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { ensureAttributes } from '../../gl/shader/program/ensureAttributes.mjs';\nimport { STENCIL_MODES } from '../../shared/state/const.mjs';\nimport { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi.mjs';\n\n\"use strict\";\nconst topologyStringToId = {\n  \"point-list\": 0,\n  \"line-list\": 1,\n  \"line-strip\": 2,\n  \"triangle-list\": 3,\n  \"triangle-strip\": 4\n};\nfunction getGraphicsStateKey(geometryLayout, shaderKey, state, blendMode, topology) {\n  return geometryLayout << 24 | shaderKey << 16 | state << 10 | blendMode << 5 | topology;\n}\nfunction getGlobalStateKey(stencilStateId, multiSampleCount, colorMask, renderTarget) {\n  return colorMask << 6 | stencilStateId << 3 | renderTarget << 1 | multiSampleCount;\n}\nclass PipelineSystem {\n  constructor(renderer) {\n    this._moduleCache = /* @__PURE__ */ Object.create(null);\n    this._bufferLayoutsCache = /* @__PURE__ */ Object.create(null);\n    this._bindingNamesCache = /* @__PURE__ */ Object.create(null);\n    this._pipeCache = /* @__PURE__ */ Object.create(null);\n    this._pipeStateCaches = /* @__PURE__ */ Object.create(null);\n    this._colorMask = 15;\n    this._multisampleCount = 1;\n    this._renderer = renderer;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n    this.setStencilMode(STENCIL_MODES.DISABLED);\n    this._updatePipeHash();\n  }\n  setMultisampleCount(multisampleCount) {\n    if (this._multisampleCount === multisampleCount)\n      return;\n    this._multisampleCount = multisampleCount;\n    this._updatePipeHash();\n  }\n  setRenderTarget(renderTarget) {\n    this._multisampleCount = renderTarget.msaaSamples;\n    this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n    this._updatePipeHash();\n  }\n  setColorMask(colorMask) {\n    if (this._colorMask === colorMask)\n      return;\n    this._colorMask = colorMask;\n    this._updatePipeHash();\n  }\n  setStencilMode(stencilMode) {\n    if (this._stencilMode === stencilMode)\n      return;\n    this._stencilMode = stencilMode;\n    this._stencilState = GpuStencilModesToPixi[stencilMode];\n    this._updatePipeHash();\n  }\n  setPipeline(geometry, program, state, passEncoder) {\n    const pipeline = this.getPipeline(geometry, program, state);\n    passEncoder.setPipeline(pipeline);\n  }\n  getPipeline(geometry, program, state, topology) {\n    if (!geometry._layoutKey) {\n      ensureAttributes(geometry, program.attributeData);\n      this._generateBufferKey(geometry);\n    }\n    topology || (topology = geometry.topology);\n    const key = getGraphicsStateKey(\n      geometry._layoutKey,\n      program._layoutKey,\n      state.data,\n      state._blendModeId,\n      topologyStringToId[topology]\n    );\n    if (this._pipeCache[key])\n      return this._pipeCache[key];\n    this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n    return this._pipeCache[key];\n  }\n  _createPipeline(geometry, program, state, topology) {\n    const device = this._gpu.device;\n    const buffers = this._createVertexBufferLayouts(geometry, program);\n    const blendModes = this._renderer.state.getColorTargets(state);\n    blendModes[0].writeMask = this._stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n    const layout = this._renderer.shader.getProgramData(program).pipeline;\n    const descriptor = {\n      // TODO later check if its helpful to create..\n      // layout,\n      vertex: {\n        module: this._getModule(program.vertex.source),\n        entryPoint: program.vertex.entryPoint,\n        // geometry..\n        buffers\n      },\n      fragment: {\n        module: this._getModule(program.fragment.source),\n        entryPoint: program.fragment.entryPoint,\n        targets: blendModes\n      },\n      primitive: {\n        topology,\n        cullMode: state.cullMode\n      },\n      layout,\n      multisample: {\n        count: this._multisampleCount\n      },\n      // depthStencil,\n      label: `PIXI Pipeline`\n    };\n    if (this._depthStencilAttachment) {\n      descriptor.depthStencil = {\n        ...this._stencilState,\n        format: \"depth24plus-stencil8\",\n        depthWriteEnabled: state.depthTest,\n        depthCompare: state.depthTest ? \"less\" : \"always\"\n      };\n    }\n    const pipeline = device.createRenderPipeline(descriptor);\n    return pipeline;\n  }\n  _getModule(code) {\n    return this._moduleCache[code] || this._createModule(code);\n  }\n  _createModule(code) {\n    const device = this._gpu.device;\n    this._moduleCache[code] = device.createShaderModule({\n      code\n    });\n    return this._moduleCache[code];\n  }\n  _generateBufferKey(geometry) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(geometry.attributes).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = geometry.attributes[attributeKeys[i]];\n      keyGen[index++] = attribute.offset;\n      keyGen[index++] = attribute.format;\n      keyGen[index++] = attribute.stride;\n      keyGen[index++] = attribute.instance;\n    }\n    const stringKey = keyGen.join(\"|\");\n    geometry._layoutKey = createIdFromString(stringKey, \"geometry\");\n    return geometry._layoutKey;\n  }\n  _generateAttributeLocationsKey(program) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(program.attributeData).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = program.attributeData[attributeKeys[i]];\n      keyGen[index++] = attribute.location;\n    }\n    const stringKey = keyGen.join(\"|\");\n    program._attributeLocationsKey = createIdFromString(stringKey, \"programAttributes\");\n    return program._attributeLocationsKey;\n  }\n  /**\n   * Returns a hash of buffer names mapped to bind locations.\n   * This is used to bind the correct buffer to the correct location in the shader.\n   * @param geometry - The geometry where to get the buffer names\n   * @param program - The program where to get the buffer names\n   * @returns An object of buffer names mapped to the bind location.\n   */\n  getBufferNamesToBind(geometry, program) {\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bindingNamesCache[key])\n      return this._bindingNamesCache[key];\n    const data = this._createVertexBufferLayouts(geometry, program);\n    const bufferNamesToBind = /* @__PURE__ */ Object.create(null);\n    const attributeData = program.attributeData;\n    for (let i = 0; i < data.length; i++) {\n      const attributes = Object.values(data[i].attributes);\n      const shaderLocation = attributes[0].shaderLocation;\n      for (const j in attributeData) {\n        if (attributeData[j].location === shaderLocation) {\n          bufferNamesToBind[i] = j;\n          break;\n        }\n      }\n    }\n    this._bindingNamesCache[key] = bufferNamesToBind;\n    return bufferNamesToBind;\n  }\n  _createVertexBufferLayouts(geometry, program) {\n    if (!program._attributeLocationsKey)\n      this._generateAttributeLocationsKey(program);\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bufferLayoutsCache[key]) {\n      return this._bufferLayoutsCache[key];\n    }\n    const vertexBuffersLayout = [];\n    geometry.buffers.forEach((buffer) => {\n      const bufferEntry = {\n        arrayStride: 0,\n        stepMode: \"vertex\",\n        attributes: []\n      };\n      const bufferEntryAttributes = bufferEntry.attributes;\n      for (const i in program.attributeData) {\n        const attribute = geometry.attributes[i];\n        if ((attribute.divisor ?? 1) !== 1) {\n          warn(`Attribute ${i} has an invalid divisor value of '${attribute.divisor}'. WebGPU only supports a divisor value of 1`);\n        }\n        if (attribute.buffer === buffer) {\n          bufferEntry.arrayStride = attribute.stride;\n          bufferEntry.stepMode = attribute.instance ? \"instance\" : \"vertex\";\n          bufferEntryAttributes.push({\n            shaderLocation: program.attributeData[i].location,\n            offset: attribute.offset,\n            format: attribute.format\n          });\n        }\n      }\n      if (bufferEntryAttributes.length) {\n        vertexBuffersLayout.push(bufferEntry);\n      }\n    });\n    this._bufferLayoutsCache[key] = vertexBuffersLayout;\n    return vertexBuffersLayout;\n  }\n  _updatePipeHash() {\n    const key = getGlobalStateKey(\n      this._stencilMode,\n      this._multisampleCount,\n      this._colorMask,\n      this._depthStencilAttachment\n    );\n    if (!this._pipeStateCaches[key]) {\n      this._pipeStateCaches[key] = /* @__PURE__ */ Object.create(null);\n    }\n    this._pipeCache = this._pipeStateCaches[key];\n  }\n  destroy() {\n    this._renderer = null;\n    this._bufferLayoutsCache = null;\n  }\n}\n/** @ignore */\nPipelineSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"pipeline\"\n};\n\nexport { PipelineSystem };\n//# sourceMappingURL=PipelineSystem.mjs.map\n","\"use strict\";\nclass GpuRenderTarget {\n  constructor() {\n    this.contexts = [];\n    this.msaaTextures = [];\n    this.msaaSamples = 1;\n  }\n}\n\nexport { GpuRenderTarget };\n//# sourceMappingURL=GpuRenderTarget.mjs.map\n","import { CLEAR } from '../../gl/const.mjs';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource.mjs';\nimport { GpuRenderTarget } from './GpuRenderTarget.mjs';\n\n\"use strict\";\nclass GpuRenderTargetAdaptor {\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderer = this._renderer;\n    const baseGpuTexture = this._getGpuColorTexture(\n      sourceRenderSurfaceTexture\n    );\n    const backGpuTexture = renderer.texture.getGpuSource(\n      destinationTexture.source\n    );\n    renderer.encoder.commandEncoder.copyTextureToTexture(\n      {\n        texture: baseGpuTexture,\n        origin: originSrc\n      },\n      {\n        texture: backGpuTexture,\n        origin: originDest\n      },\n      size\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n    gpuRenderTarget.descriptor = descriptor;\n    this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n    this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n    this._renderer.encoder.setViewport(viewport);\n  }\n  finishRenderPass() {\n    this._renderer.encoder.endRenderPass();\n  }\n  /**\n   * returns the gpu texture for the first color texture in the render target\n   * mainly used by the filter manager to get copy the texture for blending\n   * @param renderTarget\n   * @returns a gpu texture\n   */\n  _getGpuColorTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (gpuRenderTarget.contexts[0]) {\n      return gpuRenderTarget.contexts[0].getCurrentTexture();\n    }\n    return this._renderer.texture.getGpuSource(\n      renderTarget.colorTextures[0].source\n    );\n  }\n  getDescriptor(renderTarget, clear, clearValue) {\n    if (typeof clear === \"boolean\") {\n      clear = clear ? CLEAR.ALL : CLEAR.NONE;\n    }\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const colorAttachments = renderTarget.colorTextures.map(\n      (texture, i) => {\n        const context = gpuRenderTarget.contexts[i];\n        let view;\n        let resolveTarget;\n        if (context) {\n          const currentTexture = context.getCurrentTexture();\n          const canvasTextureView = currentTexture.createView();\n          view = canvasTextureView;\n        } else {\n          view = this._renderer.texture.getGpuSource(texture).createView({\n            mipLevelCount: 1\n          });\n        }\n        if (gpuRenderTarget.msaaTextures[i]) {\n          resolveTarget = view;\n          view = this._renderer.texture.getTextureView(\n            gpuRenderTarget.msaaTextures[i]\n          );\n        }\n        const loadOp = clear & CLEAR.COLOR ? \"clear\" : \"load\";\n        clearValue ?? (clearValue = renderTargetSystem.defaultClearColor);\n        return {\n          view,\n          resolveTarget,\n          clearValue,\n          storeOp: \"store\",\n          loadOp\n        };\n      }\n    );\n    let depthStencilAttachment;\n    if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture) {\n      renderTarget.ensureDepthStencilTexture();\n      renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n    }\n    if (renderTarget.depthStencilTexture) {\n      const stencilLoadOp = clear & CLEAR.STENCIL ? \"clear\" : \"load\";\n      const depthLoadOp = clear & CLEAR.DEPTH ? \"clear\" : \"load\";\n      depthStencilAttachment = {\n        view: this._renderer.texture.getGpuSource(renderTarget.depthStencilTexture.source).createView(),\n        stencilStoreOp: \"store\",\n        stencilLoadOp,\n        depthClearValue: 1,\n        depthLoadOp,\n        depthStoreOp: \"store\"\n      };\n    }\n    const descriptor = {\n      colorAttachments,\n      depthStencilAttachment\n    };\n    return descriptor;\n  }\n  clear(renderTarget, clear = true, clearColor, viewport) {\n    if (!clear)\n      return;\n    const { gpu, encoder } = this._renderer;\n    const device = gpu.device;\n    const standAlone = encoder.commandEncoder === null;\n    if (standAlone) {\n      const commandEncoder = device.createCommandEncoder();\n      const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n      passEncoder.end();\n      const gpuCommands = commandEncoder.finish();\n      device.queue.submit([gpuCommands]);\n    } else {\n      this.startRenderPass(renderTarget, clear, clearColor, viewport);\n    }\n  }\n  initGpuRenderTarget(renderTarget) {\n    renderTarget.isRoot = true;\n    const gpuRenderTarget = new GpuRenderTarget();\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (CanvasSource.test(colorTexture.resource)) {\n        const context = colorTexture.resource.getContext(\n          \"webgpu\"\n        );\n        const alphaMode = colorTexture.transparent ? \"premultiplied\" : \"opaque\";\n        try {\n          context.configure({\n            device: this._renderer.gpu.device,\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            format: \"bgra8unorm\",\n            alphaMode\n          });\n        } catch (e) {\n          console.error(e);\n        }\n        gpuRenderTarget.contexts[i] = context;\n      }\n      gpuRenderTarget.msaa = colorTexture.source.antialias;\n      if (colorTexture.source.antialias) {\n        const msaaTexture = new TextureSource({\n          width: 0,\n          height: 0,\n          sampleCount: 4\n        });\n        gpuRenderTarget.msaaTextures[i] = msaaTexture;\n      }\n    });\n    if (gpuRenderTarget.msaa) {\n      gpuRenderTarget.msaaSamples = 4;\n      if (renderTarget.depthStencilTexture) {\n        renderTarget.depthStencilTexture.source.sampleCount = 4;\n      }\n    }\n    return gpuRenderTarget;\n  }\n  destroyGpuRenderTarget(gpuRenderTarget) {\n    gpuRenderTarget.contexts.forEach((context) => {\n      context.unconfigure();\n    });\n    gpuRenderTarget.msaaTextures.forEach((texture) => {\n      texture.destroy();\n    });\n    gpuRenderTarget.msaaTextures.length = 0;\n    gpuRenderTarget.contexts.length = 0;\n  }\n  ensureDepthStencilTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa) {\n      renderTarget.depthStencilTexture.source.sampleCount = 4;\n    }\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    gpuRenderTarget.width = renderTarget.width;\n    gpuRenderTarget.height = renderTarget.height;\n    if (gpuRenderTarget.msaa) {\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const msaaTexture = gpuRenderTarget.msaaTextures[i];\n        msaaTexture?.resize(\n          colorTexture.source.width,\n          colorTexture.source.height,\n          colorTexture.source._resolution\n        );\n      });\n    }\n  }\n}\n\nexport { GpuRenderTargetAdaptor };\n//# sourceMappingURL=GpuRenderTargetAdaptor.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem.mjs';\nimport { GpuRenderTargetAdaptor } from './GpuRenderTargetAdaptor.mjs';\n\n\"use strict\";\nclass GpuRenderTargetSystem extends RenderTargetSystem {\n  constructor(renderer) {\n    super(renderer);\n    this.adaptor = new GpuRenderTargetAdaptor();\n    this.adaptor.init(renderer, this);\n  }\n}\n/** @ignore */\nGpuRenderTargetSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"renderTarget\"\n};\n\nexport { GpuRenderTargetSystem };\n//# sourceMappingURL=GpuRenderTargetSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuShaderSystem {\n  constructor() {\n    this._gpuProgramData = /* @__PURE__ */ Object.create(null);\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n    this.maxTextures = gpu.device.limits.maxSampledTexturesPerShaderStage;\n  }\n  getProgramData(program) {\n    return this._gpuProgramData[program._layoutKey] || this._createGPUProgramData(program);\n  }\n  _createGPUProgramData(program) {\n    const device = this._gpu.device;\n    const bindGroups = program.gpuLayout.map((group) => device.createBindGroupLayout({ entries: group }));\n    const pipelineLayoutDesc = { bindGroupLayouts: bindGroups };\n    this._gpuProgramData[program._layoutKey] = {\n      bindGroups,\n      pipeline: device.createPipelineLayout(pipelineLayoutDesc)\n    };\n    return this._gpuProgramData[program._layoutKey];\n  }\n  destroy() {\n    this._gpu = null;\n    this._gpuProgramData = null;\n  }\n}\n/** @ignore */\nGpuShaderSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"shader\"\n};\n\nexport { GpuShaderSystem };\n//# sourceMappingURL=GpuShaderSystem.mjs.map\n","\"use strict\";\nconst GpuBlendModesToPixi = {};\nGpuBlendModesToPixi.normal = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.add = {\n  alpha: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.multiply = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"dst\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.screen = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.overlay = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.none = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"zero\",\n    dstFactor: \"zero\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"normal-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"add-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"screen-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.erase = {\n  alpha: {\n    srcFactor: \"zero\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"zero\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.min = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"min\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"min\"\n  }\n};\nGpuBlendModesToPixi.max = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"max\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"max\"\n  }\n};\n\nexport { GpuBlendModesToPixi };\n//# sourceMappingURL=GpuBlendModesToPixi.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { State } from '../../shared/state/State.mjs';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi.mjs';\n\n\"use strict\";\nclass GpuStateSystem {\n  constructor() {\n    this.defaultState = new State();\n    this.defaultState.blend = true;\n  }\n  contextChange(gpu) {\n    this.gpu = gpu;\n  }\n  /**\n   * Gets the blend mode data for the current state\n   * @param state - The state to get the blend mode from\n   */\n  getColorTargets(state) {\n    const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n    return [\n      {\n        format: \"bgra8unorm\",\n        writeMask: 0,\n        blend\n      }\n    ];\n  }\n  destroy() {\n    this.gpu = null;\n  }\n}\n/** @ignore */\nGpuStateSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"state\"\n};\n\nexport { GpuStateSystem };\n//# sourceMappingURL=GpuStateSystem.mjs.map\n","\"use strict\";\nconst gpuUploadBufferImageResource = {\n  type: \"image\",\n  upload(source, gpuTexture, gpu) {\n    const resource = source.resource;\n    const total = (source.pixelWidth | 0) * (source.pixelHeight | 0);\n    const bytesPerPixel = resource.byteLength / total;\n    gpu.device.queue.writeTexture(\n      { texture: gpuTexture },\n      resource,\n      {\n        offset: 0,\n        rowsPerImage: source.pixelHeight,\n        bytesPerRow: source.pixelHeight * bytesPerPixel\n      },\n      {\n        width: source.pixelWidth,\n        height: source.pixelHeight,\n        depthOrArrayLayers: 1\n      }\n    );\n  }\n};\n\nexport { gpuUploadBufferImageResource };\n//# sourceMappingURL=gpuUploadBufferImageResource.mjs.map\n","\"use strict\";\nconst blockDataMap = {\n  \"bc1-rgba-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"bc2-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc3-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc7-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"etc1-rgb-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"etc2-rgba8unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"astc-4x4-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 }\n};\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\nconst gpuUploadCompressedTextureResource = {\n  type: \"compressed\",\n  upload(source, gpuTexture, gpu) {\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const blockData = blockDataMap[source.format] || defaultBlockData;\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n      gpu.device.queue.writeTexture(\n        {\n          texture: gpuTexture,\n          mipLevel: i\n        },\n        levelBuffer,\n        {\n          offset: 0,\n          bytesPerRow\n        },\n        {\n          width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n          height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n          depthOrArrayLayers: 1\n        }\n      );\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\nexport { blockDataMap, gpuUploadCompressedTextureResource };\n//# sourceMappingURL=gpuUploadCompressedTextureResource.mjs.map\n","\"use strict\";\nconst gpuUploadImageResource = {\n  type: \"image\",\n  upload(source, gpuTexture, gpu) {\n    const resource = source.resource;\n    if (!resource)\n      return;\n    const width = Math.min(gpuTexture.width, source.resourceWidth || source.pixelWidth);\n    const height = Math.min(gpuTexture.height, source.resourceHeight || source.pixelHeight);\n    const premultipliedAlpha = source.alphaMode === \"premultiply-alpha-on-upload\";\n    gpu.device.queue.copyExternalImageToTexture(\n      { source: resource },\n      { texture: gpuTexture, premultipliedAlpha },\n      {\n        width,\n        height\n      }\n    );\n  }\n};\n\nexport { gpuUploadImageResource };\n//# sourceMappingURL=gpuUploadImageSource.mjs.map\n","import { gpuUploadImageResource } from './gpuUploadImageSource.mjs';\n\n\"use strict\";\nconst gpuUploadVideoResource = {\n  type: \"video\",\n  upload(source, gpuTexture, gpu) {\n    gpuUploadImageResource.upload(source, gpuTexture, gpu);\n  }\n};\n\nexport { gpuUploadVideoResource };\n//# sourceMappingURL=gpuUploadVideoSource.mjs.map\n","\"use strict\";\nclass GpuMipmapGenerator {\n  constructor(device) {\n    this.device = device;\n    this.sampler = device.createSampler({ minFilter: \"linear\" });\n    this.pipelines = {};\n  }\n  _getMipmapPipeline(format) {\n    let pipeline = this.pipelines[format];\n    if (!pipeline) {\n      if (!this.mipmapShaderModule) {\n        this.mipmapShaderModule = this.device.createShaderModule({\n          code: (\n            /* wgsl */\n            `\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    `\n          )\n        });\n      }\n      pipeline = this.device.createRenderPipeline({\n        layout: \"auto\",\n        vertex: {\n          module: this.mipmapShaderModule,\n          entryPoint: \"vertexMain\"\n        },\n        fragment: {\n          module: this.mipmapShaderModule,\n          entryPoint: \"fragmentMain\",\n          targets: [{ format }]\n        }\n      });\n      this.pipelines[format] = pipeline;\n    }\n    return pipeline;\n  }\n  /**\n   * Generates mipmaps for the given GPUTexture from the data in level 0.\n   * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.\n   * @returns {module:External.GPUTexture} - The originally passed texture\n   */\n  generateMipmap(texture) {\n    const pipeline = this._getMipmapPipeline(texture.format);\n    if (texture.dimension === \"3d\" || texture.dimension === \"1d\") {\n      throw new Error(\"Generating mipmaps for non-2d textures is currently unsupported!\");\n    }\n    let mipTexture = texture;\n    const arrayLayerCount = texture.depthOrArrayLayers || 1;\n    const renderToSource = texture.usage & GPUTextureUsage.RENDER_ATTACHMENT;\n    if (!renderToSource) {\n      const mipTextureDescriptor = {\n        size: {\n          width: Math.ceil(texture.width / 2),\n          height: Math.ceil(texture.height / 2),\n          depthOrArrayLayers: arrayLayerCount\n        },\n        format: texture.format,\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: texture.mipLevelCount - 1\n      };\n      mipTexture = this.device.createTexture(mipTextureDescriptor);\n    }\n    const commandEncoder = this.device.createCommandEncoder({});\n    const bindGroupLayout = pipeline.getBindGroupLayout(0);\n    for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer) {\n      let srcView = texture.createView({\n        baseMipLevel: 0,\n        mipLevelCount: 1,\n        dimension: \"2d\",\n        baseArrayLayer: arrayLayer,\n        arrayLayerCount: 1\n      });\n      let dstMipLevel = renderToSource ? 1 : 0;\n      for (let i = 1; i < texture.mipLevelCount; ++i) {\n        const dstView = mipTexture.createView({\n          baseMipLevel: dstMipLevel++,\n          mipLevelCount: 1,\n          dimension: \"2d\",\n          baseArrayLayer: arrayLayer,\n          arrayLayerCount: 1\n        });\n        const passEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [{\n            view: dstView,\n            storeOp: \"store\",\n            loadOp: \"clear\",\n            clearValue: { r: 0, g: 0, b: 0, a: 0 }\n          }]\n        });\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [{\n            binding: 0,\n            resource: this.sampler\n          }, {\n            binding: 1,\n            resource: srcView\n          }]\n        });\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(3, 1, 0, 0);\n        passEncoder.end();\n        srcView = dstView;\n      }\n    }\n    if (!renderToSource) {\n      const mipLevelSize = {\n        width: Math.ceil(texture.width / 2),\n        height: Math.ceil(texture.height / 2),\n        depthOrArrayLayers: arrayLayerCount\n      };\n      for (let i = 1; i < texture.mipLevelCount; ++i) {\n        commandEncoder.copyTextureToTexture({\n          texture: mipTexture,\n          mipLevel: i - 1\n        }, {\n          texture,\n          mipLevel: i\n        }, mipLevelSize);\n        mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);\n        mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);\n      }\n    }\n    this.device.queue.submit([commandEncoder.finish()]);\n    if (!renderToSource) {\n      mipTexture.destroy();\n    }\n    return texture;\n  }\n}\n\nexport { GpuMipmapGenerator };\n//# sourceMappingURL=GpuMipmapGenerator.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\nimport { CanvasPool } from '../../shared/texture/CanvasPool.mjs';\nimport { BindGroup } from '../shader/BindGroup.mjs';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource.mjs';\nimport { gpuUploadCompressedTextureResource, blockDataMap } from './uploaders/gpuUploadCompressedTextureResource.mjs';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource.mjs';\nimport { gpuUploadVideoResource } from './uploaders/gpuUploadVideoSource.mjs';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator.mjs';\n\n\"use strict\";\nclass GpuTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._gpuSources = /* @__PURE__ */ Object.create(null);\n    this._gpuSamplers = /* @__PURE__ */ Object.create(null);\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    this._textureViewHash = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: gpuUploadImageResource,\n      buffer: gpuUploadBufferImageResource,\n      video: gpuUploadVideoResource,\n      compressed: gpuUploadCompressedTextureResource\n    };\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuSources\");\n    renderer.renderableGC.addManagedHash(this, \"_gpuSamplers\");\n    renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    renderer.renderableGC.addManagedHash(this, \"_textureViewHash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  initSource(source) {\n    if (source.autoGenerateMipmaps) {\n      const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (source.uploadMethodId !== \"compressed\") {\n      usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n      usage |= GPUTextureUsage.COPY_SRC;\n    }\n    const blockData = blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n    const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n    const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n    const textureDescriptor = {\n      label: source.label,\n      size: { width, height },\n      format: source.format,\n      sampleCount: source.sampleCount,\n      mipLevelCount: source.mipLevelCount,\n      dimension: source.dimension,\n      usage\n    };\n    const gpuTexture = this._gpu.device.createTexture(textureDescriptor);\n    this._gpuSources[source.uid] = gpuTexture;\n    if (!this.managedTextures.includes(source)) {\n      source.on(\"update\", this.onSourceUpdate, this);\n      source.on(\"resize\", this.onSourceResize, this);\n      source.on(\"destroy\", this.onSourceDestroy, this);\n      source.on(\"unload\", this.onSourceUnload, this);\n      source.on(\"updateMipmaps\", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    return gpuTexture;\n  }\n  onSourceUpdate(source) {\n    const gpuTexture = this.getGpuSource(source);\n    if (!gpuTexture)\n      return;\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source);\n    }\n  }\n  onSourceUnload(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (gpuTexture) {\n      this._gpuSources[source.uid] = null;\n      gpuTexture.destroy();\n    }\n  }\n  onUpdateMipmaps(source) {\n    if (!this._mipmapGenerator) {\n      this._mipmapGenerator = new GpuMipmapGenerator(this._gpu.device);\n    }\n    const gpuTexture = this.getGpuSource(source);\n    this._mipmapGenerator.generateMipmap(gpuTexture);\n  }\n  onSourceDestroy(source) {\n    source.off(\"update\", this.onSourceUpdate, this);\n    source.off(\"unload\", this.onSourceUnload, this);\n    source.off(\"destroy\", this.onSourceDestroy, this);\n    source.off(\"resize\", this.onSourceResize, this);\n    source.off(\"updateMipmaps\", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  onSourceResize(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (!gpuTexture) {\n      this.initSource(source);\n    } else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight) {\n      this._textureViewHash[source.uid] = null;\n      this._bindGroupHash[source.uid] = null;\n      this.onSourceUnload(source);\n      this.initSource(source);\n    }\n  }\n  _initSampler(sampler) {\n    this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n    return this._gpuSamplers[sampler._resourceId];\n  }\n  getGpuSampler(sampler) {\n    return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGpuSource(source) {\n    return this._gpuSources[source.uid] || this.initSource(source);\n  }\n  /**\n   * this returns s bind group for a specific texture, the bind group contains\n   * - the texture source\n   * - the texture style\n   * - the texture matrix\n   * This is cached so the bind group should only be created once per texture\n   * @param texture - the texture you want the bindgroup for\n   * @returns the bind group for the texture\n   */\n  getTextureBindGroup(texture) {\n    return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n  }\n  _createTextureBindGroup(texture) {\n    const source = texture.source;\n    this._bindGroupHash[texture.uid] = new BindGroup({\n      0: source,\n      1: source.style,\n      2: new UniformGroup({\n        uTextureMatrix: { type: \"mat3x3<f32>\", value: texture.textureMatrix.mapCoord }\n      })\n    });\n    return this._bindGroupHash[texture.uid];\n  }\n  getTextureView(texture) {\n    const source = texture.source;\n    return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n  }\n  _createTextureView(texture) {\n    this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n    return this._textureViewHash[texture.uid];\n  }\n  generateCanvas(texture) {\n    const renderer = this._renderer;\n    const commandEncoder = renderer.gpu.device.createCommandEncoder();\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = texture.source.pixelWidth;\n    canvas.height = texture.source.pixelHeight;\n    const context = canvas.getContext(\"webgpu\");\n    context.configure({\n      device: renderer.gpu.device,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      format: DOMAdapter.get().getNavigator().gpu.getPreferredCanvasFormat(),\n      alphaMode: \"premultiplied\"\n    });\n    commandEncoder.copyTextureToTexture({\n      texture: renderer.texture.getGpuSource(texture.source),\n      origin: {\n        x: 0,\n        y: 0\n      }\n    }, {\n      texture: context.getCurrentTexture()\n    }, {\n      width: canvas.width,\n      height: canvas.height\n    });\n    renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    return canvas;\n  }\n  getPixels(texture) {\n    const webGPUCanvas = this.generateCanvas(texture);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n    const context = canvasAndContext.context;\n    context.drawImage(webGPUCanvas, 0, 0);\n    const { width, height } = webGPUCanvas;\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = new Uint8ClampedArray(imageData.data.buffer);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return { pixels, width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    for (const k of Object.keys(this._bindGroupHash)) {\n      const key = Number(k);\n      const bindGroup = this._bindGroupHash[key];\n      bindGroup?.destroy();\n      this._bindGroupHash[key] = null;\n    }\n    this._gpu = null;\n    this._mipmapGenerator = null;\n    this._gpuSources = null;\n    this._bindGroupHash = null;\n    this._textureViewHash = null;\n    this._gpuSamplers = null;\n  }\n}\n/** @ignore */\nGpuTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"texture\"\n};\n\nexport { GpuTextureSystem };\n//# sourceMappingURL=GpuTextureSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuGraphicsAdaptor } from '../../../scene/graphics/gpu/GpuGraphicsAdaptor.mjs';\nimport { GpuMeshAdapter } from '../../../scene/mesh/gpu/GpuMeshAdapter.mjs';\nimport { GpuBatchAdaptor } from '../../batcher/gpu/GpuBatchAdaptor.mjs';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer.mjs';\nimport { SharedSystems, SharedRenderPipes } from '../shared/system/SharedSystems.mjs';\nimport { RendererType } from '../types.mjs';\nimport { BindGroupSystem } from './BindGroupSystem.mjs';\nimport { GpuBufferSystem } from './buffer/GpuBufferSystem.mjs';\nimport { GpuColorMaskSystem } from './GpuColorMaskSystem.mjs';\nimport { GpuDeviceSystem } from './GpuDeviceSystem.mjs';\nimport { GpuEncoderSystem } from './GpuEncoderSystem.mjs';\nimport { GpuStencilSystem } from './GpuStencilSystem.mjs';\nimport { GpuUboSystem } from './GpuUboSystem.mjs';\nimport { GpuUniformBatchPipe } from './GpuUniformBatchPipe.mjs';\nimport { PipelineSystem } from './pipeline/PipelineSystem.mjs';\nimport { GpuRenderTargetSystem } from './renderTarget/GpuRenderTargetSystem.mjs';\nimport { GpuShaderSystem } from './shader/GpuShaderSystem.mjs';\nimport { GpuStateSystem } from './state/GpuStateSystem.mjs';\nimport { GpuTextureSystem } from './texture/GpuTextureSystem.mjs';\n\n\"use strict\";\nconst DefaultWebGPUSystems = [\n  ...SharedSystems,\n  GpuUboSystem,\n  GpuEncoderSystem,\n  GpuDeviceSystem,\n  GpuBufferSystem,\n  GpuTextureSystem,\n  GpuRenderTargetSystem,\n  GpuShaderSystem,\n  GpuStateSystem,\n  PipelineSystem,\n  GpuColorMaskSystem,\n  GpuStencilSystem,\n  BindGroupSystem\n];\nconst DefaultWebGPUPipes = [...SharedRenderPipes, GpuUniformBatchPipe];\nconst DefaultWebGPUAdapters = [GpuBatchAdaptor, GpuMeshAdapter, GpuGraphicsAdaptor];\nconst systems = [];\nconst renderPipes = [];\nconst renderPipeAdaptors = [];\nextensions.handleByNamedList(ExtensionType.WebGPUSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGPUPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGPUPipesAdaptor, renderPipeAdaptors);\nextensions.add(...DefaultWebGPUSystems, ...DefaultWebGPUPipes, ...DefaultWebGPUAdapters);\nclass WebGPURenderer extends AbstractRenderer {\n  constructor() {\n    const systemConfig = {\n      name: \"webgpu\",\n      type: RendererType.WEBGPU,\n      systems,\n      renderPipes,\n      renderPipeAdaptors\n    };\n    super(systemConfig);\n  }\n}\n\nexport { WebGPURenderer };\n//# sourceMappingURL=WebGPURenderer.mjs.map\n"],"names":["GpuGraphicsAdaptor","init","localUniforms","UniformGroup","uTransformMatrix","value","Matrix","type","uColor","Float32Array","uRound","gpuProgram","name","bits","colorBit","generateTextureBatchBit","localUniformBit","roundPixelsBit","this","shader","Shader","resources","execute","graphicsPipe","renderable","context","customShader","renderer","contextSystem","graphicsContext","batcher","instructions","getContextRenderData","encoder","setGeometry","geometry","globalUniformsBindGroup","globalUniforms","bindGroup","setBindGroup","localBindGroup","renderPipes","uniformBatch","getUniformBindGroup","batches","topology","i","instructionSize","batch","setPipelineFromGeometryProgramAndState","state","groups","gpuBindGroup","textureBatch","textures","getTextureBatchBindGroup","count","getBindGroup","renderPassEncoder","drawIndexed","size","start","destroy","extension","WebGPUPipesAdaptor","GpuMeshAdapter","textureBit","_shader","uTexture","Texture","EMPTY","_source","uSampler","style","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","texture","getTextureBindGroup","autoAssignGlobalUniforms","autoAssignLocalUniforms","draw","_geometry","tempState","State","for2d","GpuBatchAdaptor","batchPipe","program","blendMode","pipeline","getPipeline","resetBindGroup","_touch","textureGC","setPipeline","BindGroupSystem","constructor","_hash","Object","create","_renderer","renderableGC","addManagedHash","contextChange","gpu","_gpu","groupIndex","_updateKey","_key","_createBindGroup","group","device","groupLayout","layout","entries","j","resource","gpuResource","_resourceType","uniformGroup","ubo","updateUniformGroup","buffer","getGPUBuffer","offset","descriptor","bufferResource","sampler","getGpuSampler","getGpuSource","createView","push","binding","getProgramData","bindGroups","createBindGroup","key","keys","WebGPUSystem","GpuBufferSystem","_gpuBuffers","_managedBuffers","uid","createGPUBuffer","updateBuffer","gpuBuffer","data","_updateID","queue","writeBuffer","_updateSize","byteLength","destroyAll","id","on","onBufferChange","onBufferDestroy","createBuffer","fastCopy","getMappedRange","unmap","splice","indexOf","_destroyBuffer","forEach","off","GpuColorMaskSystem","_colorMaskCache","setMask","colorMask","setColorMask","GpuDeviceSystem","options","_initPromise","_createDeviceAndAdaptor","then","runners","emit","adapter","get","getNavigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","requestDevice","defaultOptions","GpuEncoderSystem","_boundBindGroup","_boundVertexBuffer","renderStart","commandFinished","Promise","resolve","_resolveCommandFinished","commandEncoder","createCommandEncoder","beginRenderPass","gpuRenderTarget","endRenderPass","_clearCache","end","setViewport","viewport","x","y","width","height","_boundPipeline","_setVertexBuffer","index","setVertexBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","BYTES_PER_ELEMENT","setIndexBuffer","buffersToBind","getBufferNamesToBind","attributes","indexBuffer","_setShaderBindGroups","skipSync","_syncBindGroup","isUniformGroup","instanceCount","length","getSize","finishRenderPass","postrender","submit","finish","restoreRenderPass","renderTarget","adaptor","getDescriptor","boundPipeline","boundVertexBuffer","boundIndexBuffer","boundBindGroup","priority","GpuStencilSystem","_renderTargetStencilState","onRenderTargetChange","add","stencilState","stencilMode","DISABLED","stencilReference","_activeRenderTarget","setStencilMode","setStencilReference","remove","WGSL_ALIGN_SIZE_DATA","i32","align","u32","f32","f16","createUboElementsWGSL","uniformData","uboElements","map","uboElement","Error","Math","max","ceil","generateArraySyncWGSL","offsetToAdd","remainder","createUboSyncFunctionWGSL","createUboSyncFunction","uboSyncFunctions","GpuUboSystem","UboSystem","super","createUboElements","generateUboSync","UboBatch","minUniformOffsetAlignment","_minUniformOffsetAlignment","byteIndex","clear","addEmptyGroup","newSize","addGroup","array","GpuUniformBatchPipe","_bindGroupHash","_buffers","_bindGroups","_bufferResources","_batchBuffer","usage","UNIFORM","COPY_DST","COPY_SRC","Buffer","renderEnd","_uploadBindGroups","_resetBindGroups","duplicate","ensureUniformGroup","syncUniformGroup","_getBindGroup","getUboResource","_getBufferResource","getArrayBindGroup","getArrayBufferResource","BufferResource","BindGroup","bufferSystem","firstBuffer","update","copyBufferToBuffer","WebGPUPipes","topologyStringToId","PipelineSystem","_moduleCache","_bufferLayoutsCache","_bindingNamesCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","msaaSamples","_depthStencilAttachment","depthStencilAttachment","_stencilMode","_stencilState","GpuStencilModesToPixi","passEncoder","_layoutKey","ensureAttributes","attributeData","_generateBufferKey","geometryLayout","shaderKey","getGraphicsStateKey","_blendModeId","_createPipeline","buffers","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","RENDERING_MASK_ADD","vertex","module","_getModule","source","entryPoint","fragment","targets","primitive","cullMode","multisample","label","depthStencil","format","depthWriteEnabled","depthTest","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","attributeKeys","sort","attribute","stride","instance","stringKey","join","createIdFromString","_generateAttributeLocationsKey","location","_attributeLocationsKey","bufferNamesToBind","shaderLocation","values","vertexBuffersLayout","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","divisor","stencilStateId","multiSampleCount","GpuRenderTarget","contexts","msaaTextures","GpuRenderTargetAdaptor","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","baseGpuTexture","_getGpuColorTexture","backGpuTexture","copyTextureToTexture","origin","startRenderPass","clearColor","getGpuRenderTarget","getCurrentTexture","colorTextures","clearValue","ALL","NONE","colorAttachments","view","resolveTarget","mipLevelCount","getTextureView","loadOp","COLOR","defaultClearColor","storeOp","stencil","depth","depthStencilTexture","ensureDepthStencilTexture","sampleCount","msaa","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","stencilStoreOp","depthClearValue","depthStoreOp","renderPassDescriptor","gpuCommands","initGpuRenderTarget","isRoot","colorTexture","CanvasSource","test","getContext","alphaMode","transparent","configure","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","e","console","error","antialias","msaaTexture","TextureSource","destroyGpuRenderTarget","unconfigure","resizeGpuRenderTarget","resize","_resolution","GpuRenderTargetSystem","RenderTargetSystem","GpuShaderSystem","_gpuProgramData","maxTextures","limits","maxSampledTexturesPerShaderStage","_createGPUProgramData","gpuLayout","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","GpuBlendModesToPixi","alpha","srcFactor","dstFactor","operation","color","GpuStateSystem","defaultState","blend","normal","gpuUploadBufferImageResource","upload","gpuTexture","total","pixelWidth","pixelHeight","bytesPerPixel","writeTexture","rowsPerImage","bytesPerRow","depthOrArrayLayers","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","mipWidth","mipHeight","blockData","levelBuffer","mipLevel","gpuUploadImageResource","min","resourceWidth","resourceHeight","premultipliedAlpha","copyExternalImageToTexture","gpuUploadVideoResource","GpuMipmapGenerator","createSampler","minFilter","pipelines","_getMipmapPipeline","mipmapShaderModule","generateMipmap","dimension","mipTexture","arrayLayerCount","renderToSource","mipTextureDescriptor","createTexture","bindGroupLayout","getBindGroupLayout","arrayLayer","srcView","baseMipLevel","baseArrayLayer","dstMipLevel","dstView","r","g","b","a","mipLevelSize","GpuTextureSystem","managedTextures","_gpuSources","_gpuSamplers","_textureViewHash","_uploads","image","video","compressed","initSource","autoGenerateMipmaps","biggestDimension","floor","log2","uploadMethodId","textureDescriptor","includes","onSourceUpdate","onSourceResize","onSourceDestroy","onSourceUnload","onUpdateMipmaps","_mipmapGenerator","_initSampler","_resourceId","_createTextureBindGroup","textureMatrix","mapCoord","_createTextureView","generateCanvas","canvas","createCanvas","getPreferredCanvasFormat","getPixels","webGPUCanvas","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","drawImage","imageData","getImageData","pixels","Uint8ClampedArray","returnCanvasAndContext","slice","k","Number","DefaultWebGPUSystems","SharedSystems","DefaultWebGPUPipes","DefaultWebGPUAdapters","systems","renderPipeAdaptors","handleByNamedList","WebGPURenderer","AbstractRenderer","WEBGPU"],"sourceRoot":""}