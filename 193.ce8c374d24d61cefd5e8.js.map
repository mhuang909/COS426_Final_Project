{"version":3,"file":"193.ce8c374d24d61cefd5e8.js","mappings":"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","sources":["webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/app/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/bounds/getFastGlobalBounds.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/filters/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/graphics/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/particle-container/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text-html/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/init.mjs","webpack://lower-case-dashed-name-of-project/./node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nfunction getFastGlobalBounds(target, bounds) {\n  bounds.clear();\n  _getGlobalBoundsRecursive(target, bounds);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  const renderGroup = target.renderGroup || target.parentRenderGroup;\n  bounds.applyMatrix(renderGroup.worldTransform);\n  return bounds;\n}\nfunction _getGlobalBoundsRecursive(target, bounds) {\n  if (target.localDisplayStatus !== 7 || !target.measurable) {\n    return;\n  }\n  const manageEffects = !!target.effects.length;\n  let localBounds = bounds;\n  if (target.renderGroup || manageEffects) {\n    localBounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, target.worldTransform);\n  } else {\n    if (target.renderPipeId) {\n      const viewBounds = target.bounds;\n      localBounds.addFrame(\n        viewBounds.minX,\n        viewBounds.minY,\n        viewBounds.maxX,\n        viewBounds.maxY,\n        target.groupTransform\n      );\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getGlobalBoundsRecursive(children[i], localBounds);\n    }\n  }\n  if (manageEffects) {\n    let advanced = false;\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n    for (let i = 0; i < target.effects.length; i++) {\n      if (target.effects[i].addBounds) {\n        if (!advanced) {\n          advanced = true;\n          localBounds.applyMatrix(renderGroup.worldTransform);\n        }\n        target.effects[i].addBounds(localBounds, true);\n      }\n    }\n    if (advanced) {\n      localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n      bounds.addBounds(localBounds, target.relativeGroupTransform);\n    }\n    bounds.addBounds(localBounds);\n    boundsPool.return(localBounds);\n  } else if (target.renderGroup) {\n    bounds.addBounds(localBounds, target.relativeGroupTransform);\n    boundsPool.return(localBounds);\n  }\n}\n\nexport { _getGlobalBoundsRecursive, getFastGlobalBounds };\n//# sourceMappingURL=getFastGlobalBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      getFastGlobalBounds(instruction.container, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh.texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.texture = mesh._texture;\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.texture = mesh._texture;\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.texture = sprite._texture;\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    const padding = text._style.padding;\n    updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      TexturePool.returnTexture(activeTexture.texture);\n      const source = activeTexture.texture.source;\n      source.resource = null;\n      source.uploadMethodId = \"unknown\";\n      source.alphaMode = \"no-premultiply-alpha\";\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n        if (style._stroke?.width) {\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","LOW","stop","start","Ticker","shared","oldTicker","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","renderGroup","parentRenderGroup","applyMatrix","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","filterFrameTransform","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","source","resolution","Infinity","padding","antialias","blendRequired","enabled","clipToViewport","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","rootResolution","fitBounds","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","localUniformBit","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","color32BitToUniform","abgr","out","alpha","GraphicsPipe","adaptor","State","for2d","_graphicsBatchesHash","create","_destroyRenderableBound","destroyRenderable","_adaptor","renderableGC","addManagedHash","validateRenderable","graphics","context","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","didViewUpdate","_rebuild","_addToBatcher","updateRenderable","batches","_batcher","updateElement","_removeBatchForRenderable","off","isRenderable","getGpuContext","customShader","blendMode","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","batcher","gpuBatchableMesh","_texture","gpuMesh","getAdjustedBlendModeBlend","_initMeshData","_initBatchableMesh","BatchableMesh","transform","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_uvUpdateId","_textureMatrixUpdateId","_topology","reset","uvs","uvBuffer","getBuffer","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","color","attributeSize","_MeshGeometry","args","defaultOptions","shrinkToFit","shrinkBuffersToFit","super","label","usage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","uTexture","gl","getBuffers","glProgram","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","size","outBuffer","totalIndices","Uint16Array","Error","j","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","join","Function","ParticleBuffer","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","Buffer","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","key","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","max","setDataWithSize","byteLength","float32View","uint32View","wgsl","ParticleShader","Shader","GlProgram","from","fragment","gpuProgram","GpuProgram","entryPoint","WHITE","uSampler","TextureStyle","uTranslationMatrix","Color","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","_properties","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","_PlaneGeometry","deprecation","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","tilingBitGl","TilingSpriteShader","bits","roundPixelsBit","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","a","b","c","d","tx","ty","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","default2d","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_initTilingSpriteData","slice","renderableData","addressMode","applyAnchorToTexture","copyFrom","array","index","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","BatchableSprite","_attributeStart","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxTextures","colorBit","generateTextureBatchBit","batchSamplers","getBatchSamplersUniformGroup","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","getFont","text","_style","distanceField","chars","Array","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","_stroke","_anchor","_x","_y","tint","applyFillAsTint","_fill","lines","line","charPositions","char","charData","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","fontSize","distance","range","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","runners","resolutionChange","gpuText","_autoResolution","onViewUpdate","htmlText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","generatingTexture","getManagedTexture","gpuTextData","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","dropShadowToCSS","dropShadowStyle","setValue","setAlpha","toHexa","position","cos","angle","sin","blur","strokeToCSS","stroke","toHex","templates","fontWeight","fontStyle","fontVariant","letterSpacing","align","whiteSpace","wordWrapWidth","fill","breakWords","dropShadow","HTMLTextStyle","TextStyle","_cssOverrides","cssOverrides","tagStyles","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","clone","wordWrap","cssStyle","cssStyles","tagStyle","cssTagStyle","tagStyleToCSS","textStyleToCSS","addOverride","toAdd","v","includes","removeOverride","toRemove","async","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","trim","extractFontFamilies","fontCSS","fontPromises","has","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","resource","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","canvas","initSource","returnCanvasAndContext","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","CanvasTextPipe","textUid","canvasText","checkRow","checkColumn","top","bottom","CanvasTextSystem","getTextureSize","CanvasTextMetrics","measureText","_textKey","createTextureAndCanvas","renderTextToCanvas","trimmed","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","getCanvasBoundingBox","alphaMode","font","fontStringFromTextStyle","lineWidths","maxLineWidth","fontProperties","resetTransform","textBaseline","strokeStyle","lineWidth","miterLimit","lineJoin","lineCap","cap","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","dropShadowAlpha","shadowColor","toRgbaString","dropShadowBlur","dropShadowDistance","shadowBlur","shadowOffsetX","shadowOffsetY","getCanvasFillStyle","linePositionYShift","strokeWidth","i2","ascent","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds","emit"],"sourceRoot":""}